import{_ as l,r as a,o as r,c as i,f as h,a as t,b as n,d as e,e as s}from"./app.d8025251.js";const c="/assets/0_72_auto_expand.60081fb2.png",d={},_=t("h1",{id:"nushell-0-72",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#nushell-0-72","aria-hidden":"true"},"#"),e(" Nushell 0.72")],-1),u=t("p",null,"Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your command line. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful command line pipelines.",-1),p=t("p",null,"Today, we're releasing version 0.72 of Nu. This release includes many new features: mutability, looping, early returns, changes to the core commands, and much more.",-1),m=t("h1",{id:"where-to-get-it",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#where-to-get-it","aria-hidden":"true"},"#"),e(" Where to get it")],-1),g=e("Nu 0.72 is available as "),b={href:"https://github.com/nushell/nushell/releases/tag/0.72.0",target:"_blank",rel:"noopener noreferrer"},f=e("pre-built binaries"),k=e(" or from "),v={href:"https://crates.io/crates/nu",target:"_blank",rel:"noopener noreferrer"},x=e("crates.io"),w=e(". If you have Rust installed you can install it using "),y=t("code",null,"cargo install nu",-1),q=e("."),T=s(`<p>NOTE: as part of this release, we are no longer including additional features in <code>--features=extra</code>. With 0.72, SQLite features have moved into the main Nushell installation and dataframe functionality is now part of <code>--features=dataframe</code>.</p><p>As part of this release, we also publish a set of optional plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p><h1 id="themes-of-this-release-new-features" tabindex="-1"><a class="header-anchor" href="#themes-of-this-release-new-features" aria-hidden="true">#</a> Themes of this release / New features</h1><h2 id="try-catch" tabindex="-1"><a class="header-anchor" href="#try-catch" aria-hidden="true">#</a> Try/catch</h2><p>Starting with 0.72, it&#39;s now much easier to run a command that might fail and then handle the failure if it happens.</p><div class="language-text ext-text"><pre class="language-text"><code>try {
    1 / 0
} catch {
    print &quot;look, no crash&quot;
}
</code></pre></div><p>The <code>catch</code> part of the <code>try/catch</code> is optional. Without it, the <code>try</code> block will run, and any error that occurs will be ignored.</p><p>You can also access the error, if one happens, using a closure syntax:</p><div class="language-text ext-text"><pre class="language-text"><code>try {
    1 / 0
} catch {|e|
    print &quot;look, no crash.&quot;
    print $e
}
</code></pre></div><h2 id="auto-expanding-data-views" tabindex="-1"><a class="header-anchor" href="#auto-expanding-data-views" aria-hidden="true">#</a> Auto-expanding data views</h2><p><img src="`+c+`" alt="Expanded data view"></p><p>With the new default config, we now also detect the terminal width and will automatically expand the data view to include more information if it&#39;s available.</p><p>This uses an improved expanding data view capability from 0.70.</p><h2 id="redirection" tabindex="-1"><a class="header-anchor" href="#redirection" aria-hidden="true">#</a> Redirection</h2><p>This release also includes a new way of redirecting the stdout and/or stderr of external commands. This gives easier access to the output streams than was previously possible.</p><div class="language-text ext-text"><pre class="language-text"><code>&gt; cat foo.txt out&gt; bar.txt
</code></pre></div><div class="language-text ext-text"><pre class="language-text"><code>&gt; cat missingfilename.txt err&gt; my_error.txt
</code></pre></div><p>You can also create a stream built from the above, allowing one stream to empty and then be followed by the other stream:</p><div class="language-text ext-text"><pre class="language-text"><code>&gt; git status out+err&gt; git_status.txt
</code></pre></div><h2 id="closures-blocks" tabindex="-1"><a class="header-anchor" href="#closures-blocks" aria-hidden="true">#</a> Closures/blocks</h2><p>We have now split closures and blocks into two separate value types. A closure can have parameters, can close over variables outside of its scope, and can be passed as a value.</p><p>An example closure:</p><div class="language-text ext-text"><pre class="language-text"><code>ls | each {|it| print $it.name }
</code></pre></div><p>You can also think of creating a custom command like <code>def foo [] { ... }</code> as creating a closure.</p><p>A block is much simpler and is used as the bottom of commands like <code>if</code> and loops.</p><p>An example block:</p><div class="language-text ext-text"><pre class="language-text"><code>if true {
    print &quot;hello!&quot;
}
</code></pre></div><p>Blocks don&#39;t close over (or capture) variables, don&#39;t have parameters, and can&#39;t be passed as a value. Blocks, however, do have one special trick...</p><h2 id="mutation" tabindex="-1"><a class="header-anchor" href="#mutation" aria-hidden="true">#</a> Mutation</h2><p>Starting in this release, you can create local mutable variables. You can create mutable variables using the <code>mut</code> keyword:</p><div class="language-text ext-text"><pre class="language-text"><code>mut x = 1
$x = $x + 100
print $x
</code></pre></div><p>A mutable variable can only live and change in the closure in which it&#39;s created. Blocks, however, have access to the mutable variables in the parent closure. For example, mutating a variable inside of the block used in an <code>if</code> call is valid:</p><div class="language-text ext-text"><pre class="language-text"><code>mut x = 1
if true {
    $x += 1000
}
print $x
</code></pre></div><h2 id="loop-while" tabindex="-1"><a class="header-anchor" href="#loop-while" aria-hidden="true">#</a> Loop/while</h2><p>The 0.72 release also includes a few new looping commands: <code>loop</code> and <code>while</code>.</p><p>The <code>loop</code> command runs a block forever:</p><div class="language-text ext-text"><pre class="language-text"><code>loop {
    print &quot;hit ctrl-c to break out of this example&quot;
}
</code></pre></div><p>The <code>while</code> command will run its block as long as a condition is met:</p><div class="language-text ext-text"><pre class="language-text"><code>mut x = 0
while $x &lt; 10 {
    print $x
    $x += 1
}
</code></pre></div><h2 id="break-continue" tabindex="-1"><a class="header-anchor" href="#break-continue" aria-hidden="true">#</a> Break/continue</h2><p>Loops can now also use the <code>break</code> and <code>continue</code> feature common in many programming languages. <code>break</code> will break out of the current loop. And <code>continue</code> will continue the loop at the next iteration.</p><h2 id="return" tabindex="-1"><a class="header-anchor" href="#return" aria-hidden="true">#</a> Return</h2><p>The 0.72 release also includes the ability to return early from a closure or command.</p><div class="language-text ext-text"><pre class="language-text"><code>def foo [x] {
    if $x &gt; 10 {
        return 1000
    }
    0
}
</code></pre></div><h2 id="command-refinement-simplification-and-elimination" tabindex="-1"><a class="header-anchor" href="#command-refinement-simplification-and-elimination" aria-hidden="true">#</a> Command refinement, simplification, and elimination</h2><p>This release contains many breaking changes to Nu&#39;s built-in commands (sorry!). As we move toward version 1.0 we want to ensure that Nu ships with a small curated set of consistent, well-designed &quot;standard library&quot; commands. This requires taking a hard look at existing commands, and in some cases breaking changes are unavoidable. We expect that this effort will span a few release cycles.</p><h2 id="dataframes-no-longer-included-by-default-smaller-binaries" tabindex="-1"><a class="header-anchor" href="#dataframes-no-longer-included-by-default-smaller-binaries" aria-hidden="true">#</a> Dataframes no longer included by default - smaller binaries</h2><p>Nu&#39;s dataframe support is extensive, impressive, and very useful to users who rely on it. However, it comes at a high cost in terms of compile time, binary size, and complexity. Starting with version 0.72, dataframe commands are no longer included in the release binaries published on GitHub or the default binaries published via package managers (like Homebrew, winget, Scoop). As a result of this change, the main Nu executable is now about 50% smaller.</p>`,48),A=e("To continue using dataframe commands, you can build Nu from source using the "),N=t("code",null,"dataframe",-1),R=e(),C={href:"https://doc.rust-lang.org/cargo/reference/features.html",target:"_blank",rel:"noopener noreferrer"},$=e("Cargo feature"),S=e(". For example, to install using Cargo: "),F=t("code",null,"cargo install nu --features=dataframe",-1),z={id:"allow-reloading-overlay-definitions-kubouch",tabindex:"-1"},E=t("a",{class:"header-anchor",href:"#allow-reloading-overlay-definitions-kubouch","aria-hidden":"true"},"#",-1),W=e(" Allow reloading overlay definitions ("),B={href:"https://github.com/nushell/nushell/pull/7231",target:"_blank",rel:"noopener noreferrer"},I=e("kubouch"),L=e(")"),M=s(`<p>A common pattern in using overlays is shadowing an existing environment variable, such as PROMPT_COMMAND. However, <code>overlay use</code> would keep loading the value from the first activation. It is best explained with an example. Assume the following module:</p><div class="language-text ext-text"><pre class="language-text"><code>module prompt {
    export-env {
        let-env PROMPT_COMMAND = (date now | into string)
    }
}
</code></pre></div><p>Calling <code>overlay use prompt</code> for the first time changes the prompt to the current time, however, subsequent calls to <code>overlay use</code> won&#39;t change the time. That&#39;s because overlays, once activated, store their state so they can be hidden and restored at later time. To force-reload the environment, we added a new <code>--reload</code> flag: Calling <code>overlay use --reload prompt</code> repeatedly now updates the prompt with the current time each time.</p>`,3),P={id:"virtualenv-activation-changes-kubouch",tabindex:"-1"},D=t("a",{class:"header-anchor",href:"#virtualenv-activation-changes-kubouch","aria-hidden":"true"},"#",-1),O=e(" virtualenv activation changes ("),j={href:"https://github.com/pypa/virtualenv/pull/2422",target:"_blank",rel:"noopener noreferrer"},H=e("kubouch"),U=e(")"),V=e("Since the verion 20.17.0 of "),Y={href:"https://github.com/pypa/virtualenv",target:"_blank",rel:"noopener noreferrer"},G=e("virtualenv"),Q=e(", the new way to activate an environment is to call "),K=t("code",null,"overlay use activate.nu",-1),J=e(" instead of the "),X=t("code",null,"source activate.nu",-1),Z=e(". This change is in line with gradual deprecation of "),ee=t("code",null,"source",-1),te=e(" and moving us towards using modules as overlays in more cases. Please, check the "),oe={href:"https://github.com/pypa/virtualenv/blob/main/src/virtualenv/activation/nushell/activate.nu",target:"_blank",rel:"noopener noreferrer"},ne=e("activation script itself"),se=e(" for more details."),le=t("h1",{id:"breaking-changes",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#breaking-changes","aria-hidden":"true"},"#"),e(" Breaking changes")],-1),ae=t("li",null,"As mentioned above, dataframe support has been removed from the default Nu binaries.",-1),re={href:"https://github.com/nushell/nushell/pull/7040",target:"_blank",rel:"noopener noreferrer"},ie=e("Nu's SQLite DSL commands have been removed"),he=e(". "),ce=t("code",null,"open foo.db",-1),de=e(" and "),_e=t("code",null,'open foo.db | query db "SELECT * ..."',-1),ue=e(" still work, but the commands which mapped 1-to-1 with SQL clauses (ex: "),pe=t("code",null,"open foo.db | into db | select * | from table some_table | order-by some_column",-1),me=e(") have been removed. These commands were an interesting experiment but they didn't work out, and we're removing them to simplify database access in Nu."),ge={href:"https://github.com/nushell/nushell/pull/7052",target:"_blank",rel:"noopener noreferrer"},be=e("The "),fe=t("code",null,"is_plugin",-1),ke=e(", "),ve=t("code",null,"is_custom",-1),xe=e(", and "),we=t("code",null,"is_keyword",-1),ye=e(" columns in "),qe=t("code",null,"help commands",-1),Te=e(" have been replaced with a single "),Ae=t("code",null,"command_type",-1),Ne=e(" column."),Re={href:"https://github.com/nushell/nushell/pull/7043",target:"_blank",rel:"noopener noreferrer"},Ce=t("code",null,"date format",-1),$e=e(" now returns an error if not given an input."),Se=e(" Previously it would default to the current time."),Fe={href:"https://github.com/nushell/nushell/pull/7186",target:"_blank",rel:"noopener noreferrer"},ze=t("code",null,"first",-1),Ee=e(" and "),We={href:"https://github.com/nushell/nushell/pull/7184",target:"_blank",rel:"noopener noreferrer"},Be=t("code",null,"last",-1),Ie=e(" will now return an error if given a negative index. Previously the behavior was undefined and may have returned entries due to an underflow."),Le={href:"https://github.com/nushell/nushell/pull/7042",target:"_blank",rel:"noopener noreferrer"},Me=e("The "),Pe=t("code",null,"--predicate",-1),De=e(" flag has been removed from "),Oe=t("code",null,"find",-1),je=e(". "),He=t("code",null,"where",-1),Ue=e(" can be used in all situations where "),Ve=t("code",null,"find --predicate",-1),Ye=e(" was previously used."),Ge={href:"https://github.com/nushell/nushell/pull/7042",target:"_blank",rel:"noopener noreferrer"},Qe=t("code",null,"sort-by",-1),Ke=e(" now requires a column name to sort by"),Je=e(". To sort lists without specifying a column name, "),Xe=t("code",null,"sort",-1),Ze=e(" can be used."),et=t("code",null,"seq",-1),tt=e(", "),ot=t("code",null,"seq char",-1),nt=e(", and "),st=t("code",null,"seq date",-1),lt=e(" no longer have "),at=t("code",null,"--separator",-1),rt=e(" and "),it=t("code",null,"--terminator",-1),ht=e(" flags ("),ct={href:"https://github.com/nushell/nushell/pull/7045",target:"_blank",rel:"noopener noreferrer"},dt=e("#7045"),_t=e(", "),ut={href:"https://github.com/nushell/nushell/pull/7054",target:"_blank",rel:"noopener noreferrer"},pt=e("#7054"),mt=e(", "),gt={href:"https://github.com/nushell/nushell/pull/7096",target:"_blank",rel:"noopener noreferrer"},bt=e("#7096"),ft=e("). This helps ensure that the return type for those commands is consistent, and "),kt=t("code",null,"str join",-1),vt=e(" can be used to accomplish the same effect."),xt={href:"https://github.com/nushell/nushell/pull/7144",target:"_blank",rel:"noopener noreferrer"},wt=e("The "),yt=t("code",null,"build-string",-1),qt=e(" command has been removed"),Tt=e(". To concatenate strings, use the "),At=t("code",null,"+",-1),Nt=e(" operator, "),Rt={href:"https://www.nushell.sh/book/working_with_strings.html#string-interpolation",target:"_blank",rel:"noopener noreferrer"},Ct=e("string interpolation"),$t=e(", or "),St=t("code",null,"str join",-1),Ft=e("."),zt={href:"https://github.com/nushell/nushell/pull/7159",target:"_blank",rel:"noopener noreferrer"},Et=t("code",null,"wrap",-1),Wt=e(" now expands ranges"),Bt=e(". It works the same as with lists or "),It=t("code",null,"seq",-1),Lt=e("."),Mt={href:"https://github.com/nushell/nushell/pull/7124",target:"_blank",rel:"noopener noreferrer"},Pt=t("code",null,"url parse",-1),Dt=e(),Ot=t("code",null,"url scheme",-1),jt=e(", "),Ht=t("code",null,"url host",-1),Ut=e(", "),Vt=t("code",null,"url path",-1),Yt=e(", and "),Gt=t("code",null,"url query",-1),Qt=e(" commands have been removed. We added the command "),Kt=t("code",null,"url parse",-1),Jt=e("."),Xt=e(" This new command returns a Record with scheme, username, password, host, path, query, params (as a Record) and fragment."),Zt={href:"https://github.com/nushell/nushell/pull/7198",target:"_blank",rel:"noopener noreferrer"},eo=t("code",null,"sort",-1),to=e(", "),oo=t("code",null,"sort-by",-1),no=e(", "),so=t("code",null,"str contains",-1),lo=e(" and "),ao=t("code",null,"find",-1),ro=e(" have had their "),io=t("code",null,"--insensitive",-1),ho=e(" flags renamed to "),co=t("code",null,"--ignore-case",-1),_o=e("."),uo=e(". "),po=t("code",null,"--ignore-case",-1),mo=e(" is used by "),go=t("code",null,"uniq",-1),bo=e(", as well as popular external commands like "),fo=t("code",null,"less",-1),ko=e(", "),vo=t("code",null,"grep",-1),xo=e(" and "),wo=t("code",null,"wget",-1),yo=e(", so it could be considered a standard flag name."),qo=t("h2",{id:"new-boolean-operator-xor-planned-operator-simplification",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#new-boolean-operator-xor-planned-operator-simplification","aria-hidden":"true"},"#"),e(" New boolean operator "),t("code",null,"xor"),e(" - Planned operator simplification")],-1),To=e("To complement our logical boolean operators "),Ao=t("code",null,"and",-1),No=e("/"),Ro=t("code",null,"&&",-1),Co=e(" and "),$o=t("code",null,"or",-1),So=e("/"),Fo=t("code",null,"||",-1),zo=e(" we "),Eo={href:"https://github.com/nushell/nushell/pull/7242",target:"_blank",rel:"noopener noreferrer"},Wo=e("added boolean "),Bo=t("code",null,"xor",-1),Io=e(". This is consistent with "),Lo=t("code",null,"bit-and",-1),Mo=e(", "),Po=t("code",null,"bit-xor",-1),Do=e(", and "),Oo=t("code",null,"bit-or",-1),jo=e("."),Ho=s(`<p>We are currently considering to deprecate the C-style symbols <code>&amp;&amp;</code>/<code>||</code> in favor of the spelled out <code>and</code>/<code>or</code> to increase consistency and provide more actionable error messages when trying to use <code>&amp;&amp;</code>/<code>||</code> in a similar fashion to bash.</p><h2 id="config-options-have-been-grouped-together" tabindex="-1"><a class="header-anchor" href="#config-options-have-been-grouped-together" aria-hidden="true">#</a> Config options have been grouped together</h2><p>The structure of $env.config (and thus the record used with <code>let-env config = </code> statements in <code>config.nu</code> and other places) has been reorganised. Various options are now grouped into subrecords (similar to <code>table_trim</code>) and had their names shortened. This allows <code>config.nu</code> files to be better structured, and thus easier to edit and read, while also allowing future options to be added without making the</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Your existing <code>config.nu</code> options WILL still work in this version!! However, you will get a warning message if you use the old versions of the options (as you might already be aware). Support for these old options will be dropped in a future Nushell update, so take care to convert your <code>config.nu</code> files when you can.</p></div><p>The changes are:</p><ul><li><code>use_ls_colors</code> and <code>clickable_links</code> have been moved to into an <code>ls</code> subrecord.</li><li><code>rm_always_trash</code> has been moved into the <code>rm</code> record. Further <code>rm</code> config options to accompany it may appear in the future.</li><li><code>cd_with_abbreviations</code> has been moved into a <code>cd</code> record. Further <code>cd</code> config options to accompany it may appear in the future.</li><li><code>history_file_format</code>, <code>sync_history_on_enter</code> and <code>max_history_size</code> have been moved to a <code>history</code> subrecord.</li><li><code>filesize_metric</code> and <code>filesize_format</code> have been moved to a <code>filesize</code> subrecord.</li><li><code>case_sensitive_completions</code>, <code>quick_completions</code>, <code>partial_completions</code> and <code>completion_algorithm</code> have been moved into a <code>completions</code> subrecord.</li><li>The <code>completions</code> subrecord also contains an <code>external</code> subrecord. <ul><li><code>enable_external_completion</code>, <code>max_external_completion_results</code>, and <code>external_completer</code> have been moved into the aforementioned subrecord.</li></ul></li><li><code>table_mode</code>, <code>table_index_mode</code> and the <code>table_trim</code> subrecord have been moved into a <code>table</code> subrecord.</li></ul><p>The new grouped options look like this:</p><div class="language-bash ext-sh"><pre class="language-bash"><code>  ls: <span class="token punctuation">{</span>
    use_ls_colors: <span class="token boolean">true</span> <span class="token comment"># use the LS_COLORS environment variable to colorize output</span>
    clickable_links: <span class="token boolean">true</span> <span class="token comment"># enable or disable clickable links. Your terminal has to support links.</span>
  <span class="token punctuation">}</span>
  rm: <span class="token punctuation">{</span>
    always_trash: <span class="token boolean">true</span> <span class="token comment"># always act as if -t was given. Can be overridden with -p</span>
  <span class="token punctuation">}</span>
  cd: <span class="token punctuation">{</span>
    abbreviations: <span class="token boolean">true</span> <span class="token comment"># allows \`cd s/o/f\` to expand to \`cd some/other/folder\`</span>
  <span class="token punctuation">}</span>
  table: <span class="token punctuation">{</span>
    mode: rounded <span class="token comment"># basic, compact, compact_double, light, thin, with_love, rounded, reinforced, heavy, none, other</span>
    index_mode: always <span class="token comment"># &quot;always&quot; show indexes, &quot;never&quot; show indexes, &quot;auto&quot; = show indexes when a table has &quot;index&quot; column</span>
    trim: <span class="token punctuation">{</span>
      methodology: wrapping <span class="token comment"># wrapping or truncating</span>
      wrapping_try_keep_words: <span class="token boolean">true</span> <span class="token comment"># A strategy used by the &#39;wrapping&#39; methodology</span>
      truncating_suffix: <span class="token string">&quot;...&quot;</span> <span class="token comment"># A suffix used by the &#39;truncating&#39; methodology</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  history: <span class="token punctuation">{</span>
    max_size: <span class="token number">10000</span> <span class="token comment"># Session has to be reloaded for this to take effect</span>
    sync_on_enter: <span class="token boolean">true</span> <span class="token comment"># Enable to share history between multiple sessions, else you have to close the session to write history to file</span>
    file_format: <span class="token string">&quot;plaintext&quot;</span> <span class="token comment"># &quot;sqlite&quot; or &quot;plaintext&quot;</span>
  <span class="token punctuation">}</span>
  completions: <span class="token punctuation">{</span>
    case_sensitive: <span class="token boolean">false</span> <span class="token comment"># set to true to enable case-sensitive completions</span>
    quick: <span class="token boolean">true</span>  <span class="token comment"># set this to false to prevent auto-selecting completions when only one remains</span>
    partial: <span class="token boolean">true</span>  <span class="token comment"># set this to false to prevent partial filling of the prompt</span>
    algorithm: <span class="token string">&quot;prefix&quot;</span>  <span class="token comment"># prefix or fuzzy</span>
    external: <span class="token punctuation">{</span>
      enable: <span class="token boolean">true</span> <span class="token comment"># set to false to prevent nushell looking into $env.PATH to find more suggestions, \`false\` recommended for WSL users as this look up my be very slow</span>
      max_results: <span class="token number">100</span> <span class="token comment"># setting it lower can improve completion performance at the cost of omitting some options</span>
      completer: null <span class="token comment"># check &#39;carapace_completer&#39; above as an example</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  filesize: <span class="token punctuation">{</span>
    metric: <span class="token boolean">true</span> <span class="token comment"># true =&gt; KB, MB, GB (ISO standard), false =&gt; KiB, MiB, GiB (Windows standard)</span>
    format: <span class="token string">&quot;auto&quot;</span> <span class="token comment"># b, kb, kib, mb, mib, gb, gib, tb, tib, pb, pib, eb, eib, zb, zib, auto</span>
  <span class="token punctuation">}</span>
</code></pre></div><p>To output your existing options in the above format (that could be pasted into your config.nu file before you delete the old options), run this code in your copy of Nushell:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token variable">$env</span>.config <span class="token operator">|</span> <span class="token keyword">do</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span> ls: <span class="token punctuation">{</span> use_ls_colors: <span class="token variable">$in</span>.use_ls_colors clickable_links: <span class="token variable">$in</span>.show_clickable_links_in_ls <span class="token punctuation">}</span> rm: <span class="token punctuation">{</span> always_trash: <span class="token variable">$in</span>.rm_always_trash <span class="token punctuation">}</span> cd: <span class="token punctuation">{</span> abbreviations: <span class="token variable">$in</span>.cd_with_abbreviations <span class="token punctuation">}</span> table: <span class="token punctuation">{</span> mode: <span class="token variable">$in</span>.table_mode index_mode: <span class="token variable">$in</span>.table_index_mode trim: <span class="token variable">$in</span>.table_trim <span class="token punctuation">}</span> history: <span class="token punctuation">{</span> max_size: <span class="token variable">$in</span>.max_history_size sync_on_enter: <span class="token variable">$in</span>.sync_history_on_enter file_format: <span class="token variable">$in</span>.history_file_format <span class="token punctuation">}</span> completions: <span class="token punctuation">{</span> case_sensitive: <span class="token variable">$in</span>.case_sensitive_completions quick: <span class="token variable">$in</span>.quick_completions partial: <span class="token variable">$in</span>.partial_completions algorithm:<span class="token variable">$in</span>.completion_algorithm external: <span class="token punctuation">{</span> enable: <span class="token variable">$in</span>.enable_external_completion max_results: <span class="token variable">$in</span>.max_external_completion_results completer:<span class="token variable">$in</span>.external_completer <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">|</span> to nuon <span class="token operator">|</span> str substring <span class="token number">1</span><span class="token punctuation">..</span>-1
</code></pre></div><h2 id="minimum-rust-version-has-bumped-to-1-65" tabindex="-1"><a class="header-anchor" href="#minimum-rust-version-has-bumped-to-1-65" aria-hidden="true">#</a> Minimum Rust version has bumped to 1.65</h2><p>Due to some breakage in dependencies, we&#39;ve gone ahead and bumped the required version of Rust to 1.65, which addresses the issue. Apologies to anyone who is inconvenienced by the bump. We anticipate returning to the Rust-1 versions in the future.</p><h1 id="full-changelog" tabindex="-1"><a class="header-anchor" href="#full-changelog" aria-hidden="true">#</a> Full changelog</h1><h2 id="nushell" tabindex="-1"><a class="header-anchor" href="#nushell" aria-hidden="true">#</a> Nushell</h2>`,14),Uo=e("fdncred created "),Vo={href:"https://github.com/nushell/nushell/pull/7265",target:"_blank",rel:"noopener noreferrer"},Yo=e("update release-pkg.nu to include more recent less version"),Go=e(", and "),Qo={href:"https://github.com/nushell/nushell/pull/7263",target:"_blank",rel:"noopener noreferrer"},Ko=e("add a more verbose description of operators"),Jo=e(", and "),Xo={href:"https://github.com/nushell/nushell/pull/7254",target:"_blank",rel:"noopener noreferrer"},Zo=e("add "),en=t("code",null,"help operators",-1),tn=e(" command"),on=e(", and "),nn={href:"https://github.com/nushell/nushell/pull/7249",target:"_blank",rel:"noopener noreferrer"},sn=e("pin to rust v1.65"),ln=e(", and "),an={href:"https://github.com/nushell/nushell/pull/7227",target:"_blank",rel:"noopener noreferrer"},rn=e("pin to a version of zstd that doesn't break dataframe compilation"),hn=e(", and "),cn={href:"https://github.com/nushell/nushell/pull/7225",target:"_blank",rel:"noopener noreferrer"},dn=e("add "),_n=t("code",null,"into record",-1),un=e(" command"),pn=e(", and "),mn={href:"https://github.com/nushell/nushell/pull/7146",target:"_blank",rel:"noopener noreferrer"},gn=e("update default_config.nu with display_output"),bn=e(", and "),fn={href:"https://github.com/nushell/nushell/pull/7113",target:"_blank",rel:"noopener noreferrer"},kn=e("fix "),vn=t("code",null,"ansi --osc",-1),xn=e(" parameter adding extra semi-colon"),wn=e(", and "),yn={href:"https://github.com/nushell/nushell/pull/7103",target:"_blank",rel:"noopener noreferrer"},qn=e("reset stack size to 10mb vs 2gb"),Tn=e(", and "),An={href:"https://github.com/nushell/nushell/pull/7088",target:"_blank",rel:"noopener noreferrer"},Nn=e("fix plugin detection in help commands"),Rn=e(", and "),Cn={href:"https://github.com/nushell/nushell/pull/7081",target:"_blank",rel:"noopener noreferrer"},$n=e("add commented out mold linker usage"),Sn=e(", and "),Fn={href:"https://github.com/nushell/nushell/pull/7069",target:"_blank",rel:"noopener noreferrer"},zn=e("use path.try_exist() to fix silent errors"),En=e(", and "),Wn={href:"https://github.com/nushell/nushell/pull/7064",target:"_blank",rel:"noopener noreferrer"},Bn=e("bump to dev release 0.71.1"),In=e(", and "),Ln={href:"https://github.com/nushell/nushell/pull/7049",target:"_blank",rel:"noopener noreferrer"},Mn=e("return value::int instead of value::record in "),Pn=t("code",null,"history session",-1),Dn=e("rgwood created "),On={href:"https://github.com/nushell/nushell/pull/7261",target:"_blank",rel:"noopener noreferrer"},jn=e("Clean up .sh scripts with shellcheck"),Hn=e(", and "),Un={href:"https://github.com/nushell/nushell/pull/7228",target:"_blank",rel:"noopener noreferrer"},Vn=e("Make catch block a closure w/ access to error"),Yn=e(", and "),Gn={href:"https://github.com/nushell/nushell/pull/7182",target:"_blank",rel:"noopener noreferrer"},Qn=e("Feature cleanup"),Kn=e(", and "),Jn={href:"https://github.com/nushell/nushell/pull/7144",target:"_blank",rel:"noopener noreferrer"},Xn=e("Remove "),Zn=t("code",null,"build-string",-1),es=e(" command"),ts=e(", and "),os={href:"https://github.com/nushell/nushell/pull/7123",target:"_blank",rel:"noopener noreferrer"},ns=e("Return errors on unexpected inputs to "),ss=t("code",null,"take",-1),ls=e(" and "),as=t("code",null,"first",-1),rs=e(", and "),is={href:"https://github.com/nushell/nushell/pull/7098",target:"_blank",rel:"noopener noreferrer"},hs=e("Improve "),cs=t("code",null,"rm",-1),ds=e(" error message when file not found"),_s=e(", and "),us={href:"https://github.com/nushell/nushell/pull/7096",target:"_blank",rel:"noopener noreferrer"},ps=e("Remove --separator from "),ms=t("code",null,"seq date",-1),gs=e(", and "),bs={href:"https://github.com/nushell/nushell/pull/7072",target:"_blank",rel:"noopener noreferrer"},fs=e("Fix CI failures after PR merge conflicts"),ks=e(", and "),vs={href:"https://github.com/nushell/nushell/pull/7054",target:"_blank",rel:"noopener noreferrer"},xs=e("Simplify "),ws=t("code",null,"seq char",-1),ys=e(", and "),qs={href:"https://github.com/nushell/nushell/pull/7045",target:"_blank",rel:"noopener noreferrer"},Ts=e("Make seq output type consistent (by removing flags)"),As=e("sholderbach created "),Ns={href:"https://github.com/nushell/nushell/pull/7251",target:"_blank",rel:"noopener noreferrer"},Rs=e("Add did-you-mean suggestions for operators"),Cs=e(", and "),$s={href:"https://github.com/nushell/nushell/pull/7242",target:"_blank",rel:"noopener noreferrer"},Ss=e("Add logical "),Fs=t("code",null,"xor",-1),zs=e(" operator"),Es=e(", and "),Ws={href:"https://github.com/nushell/nushell/pull/7214",target:"_blank",rel:"noopener noreferrer"},Bs=e("Remove "),Is=t("code",null,"samples/wasm",-1),Ls=e(" folder"),Ms=e(", and "),Ps={href:"https://github.com/nushell/nushell/pull/7186",target:"_blank",rel:"noopener noreferrer"},Ds=e("Error on negative argument of "),Os=t("code",null,"first",-1),js=e(", and "),Hs={href:"https://github.com/nushell/nushell/pull/7184",target:"_blank",rel:"noopener noreferrer"},Us=e("Error on negative argument to "),Vs=t("code",null,"last",-1),Ys=e(", and "),Gs={href:"https://github.com/nushell/nushell/pull/7117",target:"_blank",rel:"noopener noreferrer"},Qs=e("Try --locked install in virtualenv CI tests"),Ks=e(", and "),Js={href:"https://github.com/nushell/nushell/pull/7115",target:"_blank",rel:"noopener noreferrer"},Xs=e("Remove accidental "),Zs=t("code",null,"strip-ansi-escapes",-1),el=e(" after #6938"),tl=e("jt created "),ol={href:"https://github.com/nushell/nushell/pull/7243",target:"_blank",rel:"noopener noreferrer"},nl=e("Clean up keyword lines in help"),sl=e(", and "),ll={href:"https://github.com/nushell/nushell/pull/7230",target:"_blank",rel:"noopener noreferrer"},al=e("New commands: "),rl=t("code",null,"break",-1),il=e(", "),hl=t("code",null,"continue",-1),cl=e(", "),dl=t("code",null,"return",-1),_l=e(", and "),ul=t("code",null,"loop",-1),pl=e(", and "),ml={href:"https://github.com/nushell/nushell/pull/7229",target:"_blank",rel:"noopener noreferrer"},gl=e("Remove And and Or pipeline elements"),bl=e(", and "),fl={href:"https://github.com/nushell/nushell/pull/7221",target:"_blank",rel:"noopener noreferrer"},kl=e("Add try/catch functionality"),vl=e(", and "),xl={href:"https://github.com/nushell/nushell/pull/7219",target:"_blank",rel:"noopener noreferrer"},wl=e("A set of fixes for stderr redirect"),yl=e(", and "),ql={href:"https://github.com/nushell/nushell/pull/7206",target:"_blank",rel:"noopener noreferrer"},Tl=e("Don't redirect stdout when only redirecting stderr"),Al=e(", and "),Nl={href:"https://github.com/nushell/nushell/pull/7185",target:"_blank",rel:"noopener noreferrer"},Rl=e("Stdout/Stderr redirection"),Cl=e(", and "),$l={href:"https://github.com/nushell/nushell/pull/7180",target:"_blank",rel:"noopener noreferrer"},Sl=e("Move dataframe out of extra"),Fl=e(", and "),zl={href:"https://github.com/nushell/nushell/pull/7172",target:"_blank",rel:"noopener noreferrer"},El=e("Add auto-expanding table view to default config"),Wl=e(", and "),Bl={href:"https://github.com/nushell/nushell/pull/7162",target:"_blank",rel:"noopener noreferrer"},Il=e("Parser refactoring for improving pipelines"),Ll=e(", and "),Ml={href:"https://github.com/nushell/nushell/pull/7102",target:"_blank",rel:"noopener noreferrer"},Pl=e("Add additional assignment operators"),Dl=e(", and "),Ol={href:"https://github.com/nushell/nushell/pull/7101",target:"_blank",rel:"noopener noreferrer"},jl=e("Add support for while loops"),Hl=e(", and "),Ul={href:"https://github.com/nushell/nushell/pull/7099",target:"_blank",rel:"noopener noreferrer"},Vl=e("Allow field assignment into the env variable"),Yl=e(", and "),Gl={href:"https://github.com/nushell/nushell/pull/7094",target:"_blank",rel:"noopener noreferrer"},Ql=e("Update README re: typechecking"),Kl=e(", and "),Jl={href:"https://github.com/nushell/nushell/pull/7092",target:"_blank",rel:"noopener noreferrer"},Xl=e("Fix environment conversions"),Zl=e(", and "),ea={href:"https://github.com/nushell/nushell/pull/7089",target:"_blank",rel:"noopener noreferrer"},ta=e("Limited mutable variables"),oa=e(", and "),na={href:"https://github.com/nushell/nushell/pull/7086",target:"_blank",rel:"noopener noreferrer"},sa=e("Convert 'for' to a statement"),la=e(", and "),aa={href:"https://github.com/nushell/nushell/pull/7075",target:"_blank",rel:"noopener noreferrer"},ra=e("Split blocks and closures"),ia=e(", and "),ha={href:"https://github.com/nushell/nushell/pull/7068",target:"_blank",rel:"noopener noreferrer"},ca=e("Turn off foreground processes on macOS"),da=e("stormasm created "),_a={href:"https://github.com/nushell/nushell/pull/7235",target:"_blank",rel:"noopener noreferrer"},ua=e('Revert "remove zstd warning message"'),pa=e(", and "),ma={href:"https://github.com/nushell/nushell/pull/7232",target:"_blank",rel:"noopener noreferrer"},ga=e("remove zstd warning message"),ba=e("kubouch created "),fa={href:"https://github.com/nushell/nushell/pull/7231",target:"_blank",rel:"noopener noreferrer"},ka=e("Reorder export-env eval and allow reloading an overlay"),va=e(", and "),xa={href:"https://github.com/nushell/nushell/pull/7135",target:"_blank",rel:"noopener noreferrer"},wa=e("Update PR template and contributing guide"),ya=e(", and "),qa={href:"https://github.com/nushell/nushell/pull/7134",target:"_blank",rel:"noopener noreferrer"},Ta=e("Change parser cwd when running a file"),Aa=e("dmatos2012 created "),Na={href:"https://github.com/nushell/nushell/pull/7215",target:"_blank",rel:"noopener noreferrer"},Ra=e("fix color_config crashing on nonstring data"),Ca=e(", and "),$a={href:"https://github.com/nushell/nushell/pull/7070",target:"_blank",rel:"noopener noreferrer"},Sa=e("fix overflow on negative bytes"),Fa=e("webbedspace created "),za={href:"https://github.com/nushell/nushell/pull/7213",target:"_blank",rel:"noopener noreferrer"},Ea=e("Fix "),Wa=t("code",null,"fetch",-1),Ba=e("/"),Ia=t("code",null,"post",-1),La=e(" not erroring on 4xx and 5xx statuses"),Ma=e(", and "),Pa={href:"https://github.com/nushell/nushell/pull/7199",target:"_blank",rel:"noopener noreferrer"},Da=e("Fix "),Oa=t("code",null,"sort-by",-1),ja=e(", "),Ha=t("code",null,"path join",-1),Ua=e(" and "),Va=t("code",null,"size",-1),Ya=e(" error arrows"),Ga=e(", and "),Qa={href:"https://github.com/nushell/nushell/pull/7198",target:"_blank",rel:"noopener noreferrer"},Ka=e("Change all "),Ja=t("code",null,"--insensitive",-1),Xa=e(" flags to "),Za=t("code",null,"--ignore-case",-1),er=e(", and "),tr={href:"https://github.com/nushell/nushell/pull/7197",target:"_blank",rel:"noopener noreferrer"},or=e("Fix "),nr=t("code",null,"mv",-1),sr=e(" error message issues (arrows, Windows paths)"),lr=e(", and "),ar={href:"https://github.com/nushell/nushell/pull/7194",target:"_blank",rel:"noopener noreferrer"},rr=e("Fix "),ir=t("code",null,"glob",-1),hr=e(" error arrows"),cr=e(", and "),dr={href:"https://github.com/nushell/nushell/pull/7179",target:"_blank",rel:"noopener noreferrer"},_r=e("Remove erroneous test introduced in #6994"),ur=e(", and "),pr={href:"https://github.com/nushell/nushell/pull/7176",target:"_blank",rel:"noopener noreferrer"},mr=e("Rename dataframe "),gr=t("code",null,"describe",-1),br=e(" to "),fr=t("code",null,"summary",-1),kr=e(" so that the normal "),vr=t("code",null,"describe",-1),xr=e(" isn't overloaded"),wr=e(", and "),yr={href:"https://github.com/nushell/nushell/pull/7170",target:"_blank",rel:"noopener noreferrer"},qr=e("Bugfix: add table_index_mode check that was missing from #6983"),Tr=e(", and "),Ar={href:"https://github.com/nushell/nushell/pull/7165",target:"_blank",rel:"noopener noreferrer"},Nr=e("Edit "),Rr=t("code",null,"rm",-1),Cr=e(" help messages"),$r=e(", and "),Sr={href:"https://github.com/nushell/nushell/pull/7164",target:"_blank",rel:"noopener noreferrer"},Fr=e("Improve CantFindColumn and ColumnAlreadyExists errors"),zr=e(", and "),Er={href:"https://github.com/nushell/nushell/pull/7161",target:"_blank",rel:"noopener noreferrer"},Wr=e("Improve "),Br=t("code",null,"run-external",-1),Ir=e(`'s "Cannot convert argument to string" message`),Lr=e(", and "),Mr={href:"https://github.com/nushell/nushell/pull/7080",target:"_blank",rel:"noopener noreferrer"},Pr=t("code",null,"to html --list",-1),Dr=e(" now returns a table"),Or=e(", and "),jr={href:"https://github.com/nushell/nushell/pull/7063",target:"_blank",rel:"noopener noreferrer"},Hr=e("Replace all instances of 'column path' in "),Ur=t("code",null,"help",-1),Vr=e(" messages with 'cell path'"),Yr=e(", and "),Gr={href:"https://github.com/nushell/nushell/pull/7062",target:"_blank",rel:"noopener noreferrer"},Qr=e("Add "),Kr=t("code",null,"help",-1),Jr=e(" warnings for "),Xr=t("code",null,"path exists",-1),Zr=e(" and "),ei=t("code",null,"path type",-1),ti=e(" regarding usage"),oi=e(", and "),ni={href:"https://github.com/nushell/nushell/pull/7056",target:"_blank",rel:"noopener noreferrer"},si=e("Fix needs_quotes() in "),li=t("code",null,"to nuon",-1),ai=e(" (closes #6989)"),ri=e("michel-slm created "),ii={href:"https://github.com/nushell/nushell/pull/7212",target:"_blank",rel:"noopener noreferrer"},hi=e("Add binstall metadata"),ci=e("raccmonteiro created "),di={href:"https://github.com/nushell/nushell/pull/7209",target:"_blank",rel:"noopener noreferrer"},_i=t("code",null,"uniq -i",-1),ui=e(" does not convert to lowercase (#7192)"),pi=e(", and "),mi={href:"https://github.com/nushell/nushell/pull/7188",target:"_blank",rel:"noopener noreferrer"},gi=t("code",null,"uniq",-1),bi=e(" code refactoring"),fi=e(", and "),ki={href:"https://github.com/nushell/nushell/pull/7142",target:"_blank",rel:"noopener noreferrer"},vi=e("avoid test failure caused by locale thousand separator"),xi=e(", and "),wi={href:"https://github.com/nushell/nushell/pull/7124",target:"_blank",rel:"noopener noreferrer"},yi=e("new command "),qi=t("code",null,"url parse",-1),Ti=e(" (#6854) and "),Ai=t("code",null,"url",-1),Ni=e(" subcommands tests"),Ri=e(", and "),Ci={href:"https://github.com/nushell/nushell/pull/7058",target:"_blank",rel:"noopener noreferrer"},$i=e("command "),Si=t("code",null,"open",-1),Fi=e(" returns error when does not have parameters (#7048)"),zi=e(", and "),Ei={href:"https://github.com/nushell/nushell/pull/7047",target:"_blank",rel:"noopener noreferrer"},Wi=e("Type validation for "),Bi=t("code",null,"headers",-1),Ii=e(" command (#6918)"),Li=e("kamirr created "),Mi={href:"https://github.com/nushell/nushell/pull/7195",target:"_blank",rel:"noopener noreferrer"},Pi=e("Fix while ctrlc behavior"),Di=e(", and "),Oi={href:"https://github.com/nushell/nushell/pull/7178",target:"_blank",rel:"noopener noreferrer"},ji=e("Fix "),Hi=t("code",null,"last",-1),Ui=e(" memory use"),Vi=e("nibon7 created "),Yi={href:"https://github.com/nushell/nushell/pull/7193",target:"_blank",rel:"noopener noreferrer"},Gi=e("Apply clippy fix"),Qi=e("dependabot[bot] created "),Ki={href:"https://github.com/nushell/nushell/pull/7181",target:"_blank",rel:"noopener noreferrer"},Ji=e("Bump minimatch from 3.0.4 to 3.1.2 in /samples/wasm"),Xi=e("WindSoilder created "),Zi={href:"https://github.com/nushell/nushell/pull/7177",target:"_blank",rel:"noopener noreferrer"},eh=e("remove block input support in merge"),th=e(", and "),oh={href:"https://github.com/nushell/nushell/pull/7163",target:"_blank",rel:"noopener noreferrer"},nh=e("Plugin: make friendly error message when python is not found"),sh=e(", and "),lh={href:"https://github.com/nushell/nushell/pull/7156",target:"_blank",rel:"noopener noreferrer"},ah=e("Make external command substitution works friendly(like fish shell, trailing ending newlines)"),rh=e(", and "),ih={href:"https://github.com/nushell/nushell/pull/7079",target:"_blank",rel:"noopener noreferrer"},hh=e("add signature information when get help on one command"),ch=e("nanoqsh created "),dh={href:"https://github.com/nushell/nushell/pull/7175",target:"_blank",rel:"noopener noreferrer"},_h=e("Fixed json parsing"),uh=e(", and "),ph={href:"https://github.com/nushell/nushell/pull/7159",target:"_blank",rel:"noopener noreferrer"},mh=e("Consistent "),gh=t("code",null,"wrap",-1),bh=e("zhiburt created "),fh={href:"https://github.com/nushell/nushell/pull/7148",target:"_blank",rel:"noopener noreferrer"},kh=e("fix #7145"),vh=e("Decodetalkers created "),xh={href:"https://github.com/nushell/nushell/pull/7143",target:"_blank",rel:"noopener noreferrer"},wh=e("fix: ls not show pattern error"),yh=e(", and "),qh={href:"https://github.com/nushell/nushell/pull/7132",target:"_blank",rel:"noopener noreferrer"},Th=e("chore: chrono_update"),Ah=e(", and "),Nh={href:"https://github.com/nushell/nushell/pull/7082",target:"_blank",rel:"noopener noreferrer"},Rh=e("feat: Use Raw text to save if pipeline data is ExternalStream or String"),Ch=e("SUPERCILEX created "),$h={href:"https://github.com/nushell/nushell/pull/7122",target:"_blank",rel:"noopener noreferrer"},Sh=e("Restore original do -i behavior and add flags to break down shell vs program errors"),Fh=e("dandavison created "),zh={href:"https://github.com/nushell/nushell/pull/7114",target:"_blank",rel:"noopener noreferrer"},Eh=e("Add missing strip-ansi-escapes dependency to Cargo.lock"),Wh=e(", and "),Bh={href:"https://github.com/nushell/nushell/pull/7105",target:"_blank",rel:"noopener noreferrer"},Ih=e("Add input-output types to $nu.scope.commands"),Lh=e(", and "),Mh={href:"https://github.com/nushell/nushell/pull/7104",target:"_blank",rel:"noopener noreferrer"},Ph=e("Refactor create_scope"),Dh=e(", and "),Oh={href:"https://github.com/nushell/nushell/pull/7074",target:"_blank",rel:"noopener noreferrer"},jh=e("Fix command_type classification"),Hh=e(", and "),Uh={href:"https://github.com/nushell/nushell/pull/7052",target:"_blank",rel:"noopener noreferrer"},Vh=e("Collapse some "),Yh=t("code",null,"help commands",-1),Gh=e(" columns into a single column"),Qh=e("denstiny created "),Kh={href:"https://github.com/nushell/nushell/pull/7100",target:"_blank",rel:"noopener noreferrer"},Jh=e("fix(#7097): let-env should not be able to set PWD"),Xh=t("h2",{id:"extension",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#extension","aria-hidden":"true"},"#"),e(" Extension")],-1),Zh=e("fdncred created "),ec={href:"https://github.com/nushell/vscode-nushell-lang/pull/70",target:"_blank",rel:"noopener noreferrer"},tc=e("updates for nushell 0.72"),oc=t("h2",{id:"documentation",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#documentation","aria-hidden":"true"},"#"),e(" Documentation")],-1),nc=e("sholderbach created "),sc={href:"https://github.com/nushell/nushell.github.io/pull/686",target:"_blank",rel:"noopener noreferrer"},lc=e("Fix tip boxes in "),ac=t("code",null,"book/custom_commands.md",-1),rc=e(", and "),ic={href:"https://github.com/nushell/nushell.github.io/pull/684",target:"_blank",rel:"noopener noreferrer"},hc=e("Fix octal literal mentions"),cc=e(", and "),dc={href:"https://github.com/nushell/nushell.github.io/pull/683",target:"_blank",rel:"noopener noreferrer"},_c=e("Update operator docs"),uc=e("WindSoilder created "),pc={href:"https://github.com/nushell/nushell.github.io/pull/681",target:"_blank",rel:"noopener noreferrer"},mc=e("remove "),gc=t("code",null,"Subexpressions with external commands",-1),bc=e(" session"),fc=e("dmatos2012 created "),kc={href:"https://github.com/nushell/nushell.github.io/pull/680",target:"_blank",rel:"noopener noreferrer"},vc=e("expand docs on using use with export-env"),xc=e("webbedspace created "),wc={href:"https://github.com/nushell/nushell.github.io/pull/678",target:"_blank",rel:"noopener noreferrer"},yc=e("Release Notes: add note about "),qc=t("code",null,"--ignore-case",-1),Tc=e(", and "),Ac={href:"https://github.com/nushell/nushell.github.io/pull/675",target:"_blank",rel:"noopener noreferrer"},Nc=e("Add config.nu structure changes"),Rc=e("raccmonteiro created "),Cc={href:"https://github.com/nushell/nushell.github.io/pull/677",target:"_blank",rel:"noopener noreferrer"},$c=e("document "),Sc=t("code",null,"url parse",-1),Fc=e(" command"),zc=e("casidiablo created "),Ec={href:"https://github.com/nushell/nushell.github.io/pull/676",target:"_blank",rel:"noopener noreferrer"},Wc=e("Fix typo in advanced.md page"),Bc=e("remlse created "),Ic={href:"https://github.com/nushell/nushell.github.io/pull/674",target:"_blank",rel:"noopener noreferrer"},Lc=e("Fix variable path expression example"),Mc=e("nanoqsh created "),Pc={href:"https://github.com/nushell/nushell.github.io/pull/673",target:"_blank",rel:"noopener noreferrer"},Dc=e("Document wrap update"),Oc=e("hustcer created "),jc={href:"https://github.com/nushell/nushell.github.io/pull/669",target:"_blank",rel:"noopener noreferrer"},Hc=e("Refresh commands docs for nu v0.71"),Uc=e("hbt created "),Vc={href:"https://github.com/nushell/nushell.github.io/pull/668",target:"_blank",rel:"noopener noreferrer"},Yc=e("fix 404 link"),Gc=e("jt created "),Qc={href:"https://github.com/nushell/nushell.github.io/pull/656",target:"_blank",rel:"noopener noreferrer"},Kc=e("Create a section for the 0.80 philosophy"),Jc=t("h2",{id:"nu-scripts",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#nu-scripts","aria-hidden":"true"},"#"),e(" Nu_Scripts")],-1),Xc=e("WindSoilder created "),Zc={href:"https://github.com/nushell/nu_scripts/pull/318",target:"_blank",rel:"noopener noreferrer"},ed=e("fix merge doesnt support block input"),td=e("Joxtacy created "),od={href:"https://github.com/nushell/nu_scripts/pull/317",target:"_blank",rel:"noopener noreferrer"},nd=e("Add zellij completions"),sd=e("Emilgardis created "),ld={href:"https://github.com/nushell/nu_scripts/pull/316",target:"_blank",rel:"noopener noreferrer"},ad=e("improve cargo completions"),rd=e("tshaynik created "),id={href:"https://github.com/nushell/nu_scripts/pull/314",target:"_blank",rel:"noopener noreferrer"},hd=e("Add custom completions for nix"),cd=e("fdncred created "),dd={href:"https://github.com/nushell/nu_scripts/pull/313",target:"_blank",rel:"noopener noreferrer"},_d=e("updates get-weather to remove the for loop"),ud=e("taooceros created "),pd={href:"https://github.com/nushell/nu_scripts/pull/312",target:"_blank",rel:"noopener noreferrer"},md=e("Fix undetected windows enviroment"),gd=t("h2",{id:"reedline",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#reedline","aria-hidden":"true"},"#"),e(" reedline")],-1),bd=e("rgwood created "),fd={href:"https://github.com/nushell/reedline/pull/517",target:"_blank",rel:"noopener noreferrer"},kd=e("Fix example in CONTRIBUTING.md");function vd(xd,wd){const o=a("ExternalLinkIcon");return r(),i("div",null,[_,u,p,h(" more "),m,t("p",null,[g,t("a",b,[f,n(o)]),k,t("a",v,[x,n(o)]),w,y,q]),T,t("p",null,[A,N,R,t("a",C,[$,n(o)]),S,F]),t("h2",z,[E,W,t("a",B,[I,n(o)]),L]),M,t("h2",P,[D,O,t("a",j,[H,n(o)]),U]),t("p",null,[V,t("a",Y,[G,n(o)]),Q,K,J,X,Z,ee,te,t("a",oe,[ne,n(o)]),se]),le,t("ul",null,[ae,t("li",null,[t("a",re,[ie,n(o)]),he,ce,de,_e,ue,pe,me]),t("li",null,[t("a",ge,[be,fe,ke,ve,xe,we,ye,qe,Te,Ae,Ne,n(o)])]),t("li",null,[t("a",Re,[Ce,$e,n(o)]),Se]),t("li",null,[t("a",Fe,[ze,n(o)]),Ee,t("a",We,[Be,n(o)]),Ie]),t("li",null,[t("a",Le,[Me,Pe,De,Oe,n(o)]),je,He,Ue,Ve,Ye]),t("li",null,[t("a",Ge,[Qe,Ke,n(o)]),Je,Xe,Ze]),t("li",null,[et,tt,ot,nt,st,lt,at,rt,it,ht,t("a",ct,[dt,n(o)]),_t,t("a",ut,[pt,n(o)]),mt,t("a",gt,[bt,n(o)]),ft,kt,vt]),t("li",null,[t("a",xt,[wt,yt,qt,n(o)]),Tt,At,Nt,t("a",Rt,[Ct,n(o)]),$t,St,Ft]),t("li",null,[t("a",zt,[Et,Wt,n(o)]),Bt,It,Lt]),t("li",null,[t("a",Mt,[Pt,Dt,Ot,jt,Ht,Ut,Vt,Yt,Gt,Qt,Kt,Jt,n(o)]),Xt]),t("li",null,[t("a",Zt,[eo,to,oo,no,so,lo,ao,ro,io,ho,co,_o,n(o)]),uo,po,mo,go,bo,fo,ko,vo,xo,wo,yo])]),qo,t("p",null,[To,Ao,No,Ro,Co,$o,So,Fo,zo,t("a",Eo,[Wo,Bo,n(o)]),Io,Lo,Mo,Po,Do,Oo,jo]),Ho,t("ul",null,[t("li",null,[Uo,t("a",Vo,[Yo,n(o)]),Go,t("a",Qo,[Ko,n(o)]),Jo,t("a",Xo,[Zo,en,tn,n(o)]),on,t("a",nn,[sn,n(o)]),ln,t("a",an,[rn,n(o)]),hn,t("a",cn,[dn,_n,un,n(o)]),pn,t("a",mn,[gn,n(o)]),bn,t("a",fn,[kn,vn,xn,n(o)]),wn,t("a",yn,[qn,n(o)]),Tn,t("a",An,[Nn,n(o)]),Rn,t("a",Cn,[$n,n(o)]),Sn,t("a",Fn,[zn,n(o)]),En,t("a",Wn,[Bn,n(o)]),In,t("a",Ln,[Mn,Pn,n(o)])]),t("li",null,[Dn,t("a",On,[jn,n(o)]),Hn,t("a",Un,[Vn,n(o)]),Yn,t("a",Gn,[Qn,n(o)]),Kn,t("a",Jn,[Xn,Zn,es,n(o)]),ts,t("a",os,[ns,ss,ls,as,n(o)]),rs,t("a",is,[hs,cs,ds,n(o)]),_s,t("a",us,[ps,ms,n(o)]),gs,t("a",bs,[fs,n(o)]),ks,t("a",vs,[xs,ws,n(o)]),ys,t("a",qs,[Ts,n(o)])]),t("li",null,[As,t("a",Ns,[Rs,n(o)]),Cs,t("a",$s,[Ss,Fs,zs,n(o)]),Es,t("a",Ws,[Bs,Is,Ls,n(o)]),Ms,t("a",Ps,[Ds,Os,n(o)]),js,t("a",Hs,[Us,Vs,n(o)]),Ys,t("a",Gs,[Qs,n(o)]),Ks,t("a",Js,[Xs,Zs,el,n(o)])]),t("li",null,[tl,t("a",ol,[nl,n(o)]),sl,t("a",ll,[al,rl,il,hl,cl,dl,_l,ul,n(o)]),pl,t("a",ml,[gl,n(o)]),bl,t("a",fl,[kl,n(o)]),vl,t("a",xl,[wl,n(o)]),yl,t("a",ql,[Tl,n(o)]),Al,t("a",Nl,[Rl,n(o)]),Cl,t("a",$l,[Sl,n(o)]),Fl,t("a",zl,[El,n(o)]),Wl,t("a",Bl,[Il,n(o)]),Ll,t("a",Ml,[Pl,n(o)]),Dl,t("a",Ol,[jl,n(o)]),Hl,t("a",Ul,[Vl,n(o)]),Yl,t("a",Gl,[Ql,n(o)]),Kl,t("a",Jl,[Xl,n(o)]),Zl,t("a",ea,[ta,n(o)]),oa,t("a",na,[sa,n(o)]),la,t("a",aa,[ra,n(o)]),ia,t("a",ha,[ca,n(o)])]),t("li",null,[da,t("a",_a,[ua,n(o)]),pa,t("a",ma,[ga,n(o)])]),t("li",null,[ba,t("a",fa,[ka,n(o)]),va,t("a",xa,[wa,n(o)]),ya,t("a",qa,[Ta,n(o)])]),t("li",null,[Aa,t("a",Na,[Ra,n(o)]),Ca,t("a",$a,[Sa,n(o)])]),t("li",null,[Fa,t("a",za,[Ea,Wa,Ba,Ia,La,n(o)]),Ma,t("a",Pa,[Da,Oa,ja,Ha,Ua,Va,Ya,n(o)]),Ga,t("a",Qa,[Ka,Ja,Xa,Za,n(o)]),er,t("a",tr,[or,nr,sr,n(o)]),lr,t("a",ar,[rr,ir,hr,n(o)]),cr,t("a",dr,[_r,n(o)]),ur,t("a",pr,[mr,gr,br,fr,kr,vr,xr,n(o)]),wr,t("a",yr,[qr,n(o)]),Tr,t("a",Ar,[Nr,Rr,Cr,n(o)]),$r,t("a",Sr,[Fr,n(o)]),zr,t("a",Er,[Wr,Br,Ir,n(o)]),Lr,t("a",Mr,[Pr,Dr,n(o)]),Or,t("a",jr,[Hr,Ur,Vr,n(o)]),Yr,t("a",Gr,[Qr,Kr,Jr,Xr,Zr,ei,ti,n(o)]),oi,t("a",ni,[si,li,ai,n(o)])]),t("li",null,[ri,t("a",ii,[hi,n(o)])]),t("li",null,[ci,t("a",di,[_i,ui,n(o)]),pi,t("a",mi,[gi,bi,n(o)]),fi,t("a",ki,[vi,n(o)]),xi,t("a",wi,[yi,qi,Ti,Ai,Ni,n(o)]),Ri,t("a",Ci,[$i,Si,Fi,n(o)]),zi,t("a",Ei,[Wi,Bi,Ii,n(o)])]),t("li",null,[Li,t("a",Mi,[Pi,n(o)]),Di,t("a",Oi,[ji,Hi,Ui,n(o)])]),t("li",null,[Vi,t("a",Yi,[Gi,n(o)])]),t("li",null,[Qi,t("a",Ki,[Ji,n(o)])]),t("li",null,[Xi,t("a",Zi,[eh,n(o)]),th,t("a",oh,[nh,n(o)]),sh,t("a",lh,[ah,n(o)]),rh,t("a",ih,[hh,n(o)])]),t("li",null,[ch,t("a",dh,[_h,n(o)]),uh,t("a",ph,[mh,gh,n(o)])]),t("li",null,[bh,t("a",fh,[kh,n(o)])]),t("li",null,[vh,t("a",xh,[wh,n(o)]),yh,t("a",qh,[Th,n(o)]),Ah,t("a",Nh,[Rh,n(o)])]),t("li",null,[Ch,t("a",$h,[Sh,n(o)])]),t("li",null,[Fh,t("a",zh,[Eh,n(o)]),Wh,t("a",Bh,[Ih,n(o)]),Lh,t("a",Mh,[Ph,n(o)]),Dh,t("a",Oh,[jh,n(o)]),Hh,t("a",Uh,[Vh,Yh,Gh,n(o)])]),t("li",null,[Qh,t("a",Kh,[Jh,n(o)])])]),Xh,t("ul",null,[t("li",null,[Zh,t("a",ec,[tc,n(o)])])]),oc,t("ul",null,[t("li",null,[nc,t("a",sc,[lc,ac,n(o)]),rc,t("a",ic,[hc,n(o)]),cc,t("a",dc,[_c,n(o)])]),t("li",null,[uc,t("a",pc,[mc,gc,bc,n(o)])]),t("li",null,[fc,t("a",kc,[vc,n(o)])]),t("li",null,[xc,t("a",wc,[yc,qc,n(o)]),Tc,t("a",Ac,[Nc,n(o)])]),t("li",null,[Rc,t("a",Cc,[$c,Sc,Fc,n(o)])]),t("li",null,[zc,t("a",Ec,[Wc,n(o)])]),t("li",null,[Bc,t("a",Ic,[Lc,n(o)])]),t("li",null,[Mc,t("a",Pc,[Dc,n(o)])]),t("li",null,[Oc,t("a",jc,[Hc,n(o)])]),t("li",null,[Uc,t("a",Vc,[Yc,n(o)])]),t("li",null,[Gc,t("a",Qc,[Kc,n(o)])])]),Jc,t("ul",null,[t("li",null,[Xc,t("a",Zc,[ed,n(o)])]),t("li",null,[td,t("a",od,[nd,n(o)])]),t("li",null,[sd,t("a",ld,[ad,n(o)])]),t("li",null,[rd,t("a",id,[hd,n(o)])]),t("li",null,[cd,t("a",dd,[_d,n(o)])]),t("li",null,[ud,t("a",pd,[md,n(o)])])]),gd,t("ul",null,[t("li",null,[bd,t("a",fd,[kd,n(o)])])])])}const qd=l(d,[["render",vd],["__file","2022-11-29-nushell-0.72.html.vue"]]);export{qd as default};
