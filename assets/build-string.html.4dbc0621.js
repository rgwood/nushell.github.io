import{_ as a,o as e,c as s,e as n}from"./app.43db386a.js";const t={},r=n(`<h1 id="build-string" tabindex="-1"><a class="header-anchor" href="#build-string" aria-hidden="true">#</a> build-string</h1><p>Builds a string from the arguments.</p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> build-string <span class="token punctuation">..</span>.args <span class="token punctuation">{</span>flags<span class="token punctuation">}</span>
</code></pre></div><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h2><ul><li>...args: all values to form into the string</li></ul><h2 id="flags" tabindex="-1"><a class="header-anchor" href="#flags" aria-hidden="true">#</a> Flags</h2><ul><li>-h, --help: Display this help message</li></ul><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Builds a string from a string and a number, without spaces between them</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> build-string <span class="token string">&#39;foo&#39;</span> <span class="token number">3</span>
</code></pre></div>`,11),i=[r];function l(d,h){return e(),s("div",null,i)}var c=a(t,[["render",l],["__file","build-string.html.vue"]]);export{c as default};
