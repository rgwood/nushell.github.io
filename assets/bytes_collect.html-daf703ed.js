import{_ as t,p,q as o,Q as a,t as s,v as e,a1 as c}from"./framework-344bb0e4.js";const r={},l={id:"frontmatter-title-for-bytes",tabindex:"-1"},i=a("a",{class:"header-anchor",href:"#frontmatter-title-for-bytes","aria-hidden":"true"},"#",-1),u={class:"command-title"},d=c(`<h2 id="signature" tabindex="-1"><a class="header-anchor" href="#signature" aria-hidden="true">#</a> Signature</h2><p><code>&gt; bytes collect (separator)</code></p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h2><ul><li><code>separator</code>: optional separator to use when creating binary</li></ul><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Create a byte array from input</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">[</span>0x<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> 0x<span class="token punctuation">[</span><span class="token number">13</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">|</span> bytes collect
Length: <span class="token number">3</span> <span class="token punctuation">(</span>0x3<span class="token punctuation">)</span> bytes <span class="token operator">|</span> printable whitespace ascii_other non_ascii
00000000:   <span class="token number">11</span> <span class="token number">13</span> <span class="token number">15</span>                                             •••

</code></pre></div><p>Create a byte array from input with a separator</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">[</span>0x<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> 0x<span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span> 0x<span class="token punctuation">[</span><span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">|</span> bytes collect 0x<span class="token punctuation">[</span>01<span class="token punctuation">]</span>
Length: <span class="token number">5</span> <span class="token punctuation">(</span>0x5<span class="token punctuation">)</span> bytes <span class="token operator">|</span> printable whitespace ascii_other non_ascii
00000000:   <span class="token number">11</span> 01 <span class="token number">33</span> 01  <span class="token number">44</span>                                      ••3•D

</code></pre></div>`,9);function h(n,k){return p(),o("div",null,[a("h1",l,[i,s(),a("code",null,e(n.$frontmatter.title),1),s(" for bytes")]),a("div",u,e(n.$frontmatter.bytes),1),d])}const m=t(r,[["render",h],["__file","bytes_collect.html.vue"]]);export{m as default};
