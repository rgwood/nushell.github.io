import{_ as t,p,q as o,Q as a,t as s,v as e,a1 as c}from"./framework-344bb0e4.js";const l={},r={id:"frontmatter-title-for-bytes",tabindex:"-1"},u=a("a",{class:"header-anchor",href:"#frontmatter-title-for-bytes","aria-hidden":"true"},"#",-1),i={class:"command-title"},k=c(`<h2 id="signature" tabindex="-1"><a class="header-anchor" href="#signature" aria-hidden="true">#</a> Signature</h2><p><code>&gt; bytes replace (find) (replace) ...rest --all</code></p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h2><ul><li><code>find</code>: the pattern to find</li><li><code>replace</code>: the replacement pattern</li><li><code>...rest</code>: for a data structure input, replace bytes in data at the given cell paths</li><li><code>--all</code> <code>(-a)</code>: replace all occurrences of find binary</li></ul><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Find and replace contents</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> 0x<span class="token punctuation">[</span><span class="token number">10</span> AA FF AA FF<span class="token punctuation">]</span> <span class="token operator">|</span> bytes replace 0x<span class="token punctuation">[</span><span class="token number">10</span> AA<span class="token punctuation">]</span> 0x<span class="token punctuation">[</span>FF<span class="token punctuation">]</span>
Length: <span class="token number">4</span> <span class="token punctuation">(</span>0x4<span class="token punctuation">)</span> bytes <span class="token operator">|</span> printable whitespace ascii_other non_ascii
00000000:   ff ff aa ff                                          ××××

</code></pre></div><p>Find and replace all occurrences of find binary</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> 0x<span class="token punctuation">[</span><span class="token number">10</span> AA <span class="token number">10</span> BB <span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">|</span> bytes replace <span class="token parameter variable">-a</span> 0x<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> 0x<span class="token punctuation">[</span>A0<span class="token punctuation">]</span>
Length: <span class="token number">5</span> <span class="token punctuation">(</span>0x5<span class="token punctuation">)</span> bytes <span class="token operator">|</span> printable whitespace ascii_other non_ascii
00000000:   a0 aa a0 bb  a0                                      ×××××

</code></pre></div><p>Find and replace all occurrences of find binary in table</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>ColA ColB ColC<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">[</span>0x<span class="token punctuation">[</span><span class="token number">11</span> <span class="token number">12</span> <span class="token number">13</span><span class="token punctuation">]</span> 0x<span class="token punctuation">[</span><span class="token number">14</span> <span class="token number">15</span> <span class="token number">16</span><span class="token punctuation">]</span> 0x<span class="token punctuation">[</span><span class="token number">17</span> <span class="token number">18</span> <span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">|</span> bytes replace <span class="token parameter variable">-a</span> 0x<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> 0x<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> ColA ColC
╭───┬──────────────┬──────────────┬──────────────╮
│ <span class="token comment"># │     ColA     │     ColB     │     ColC     │</span>
├───┼──────────────┼──────────────┼──────────────┤
│ <span class="token number">0</span> │ <span class="token punctuation">[</span><span class="token number">19</span>, <span class="token number">18</span>, <span class="token number">19</span><span class="token punctuation">]</span> │ <span class="token punctuation">[</span><span class="token number">20</span>, <span class="token number">21</span>, <span class="token number">22</span><span class="token punctuation">]</span> │ <span class="token punctuation">[</span><span class="token number">23</span>, <span class="token number">24</span>, <span class="token number">25</span><span class="token punctuation">]</span> │
╰───┴──────────────┴──────────────┴──────────────╯

</code></pre></div>`,11);function d(n,b){return p(),o("div",null,[a("h1",r,[u,s(),a("code",null,e(n.$frontmatter.title),1),s(" for bytes")]),a("div",i,e(n.$frontmatter.bytes),1),k])}const h=t(l,[["render",d],["__file","bytes_replace.html.vue"]]);export{h as default};
