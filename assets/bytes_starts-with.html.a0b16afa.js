import{_ as n,o,c,a,t,d as e,e as r}from"./app.d8025251.js";const p={},i={id:"frontmatter-title-for-bytes",tabindex:"-1"},l=a("a",{class:"header-anchor",href:"#frontmatter-title-for-bytes","aria-hidden":"true"},"#",-1),d=e(),h=e(" for bytes"),u={class:"command-title"},b=r(`<h2 id="signature" tabindex="-1"><a class="header-anchor" href="#signature" aria-hidden="true">#</a> Signature</h2><p><code>&gt; bytes starts-with (pattern) ...rest</code></p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h2><ul><li><code>pattern</code>: the pattern to match</li><li><code>...rest</code>: optionally matches prefix of text by column paths</li></ul><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Checks if binary starts with <code>0x[1F FF AA]</code></p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> 0x<span class="token punctuation">[</span>1F FF AA AA<span class="token punctuation">]</span> <span class="token operator">|</span> bytes starts-with 0x<span class="token punctuation">[</span>1F FF AA<span class="token punctuation">]</span>
</code></pre></div><p>Checks if binary starts with <code>0x[1F]</code></p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> 0x<span class="token punctuation">[</span>1F FF AA AA<span class="token punctuation">]</span> <span class="token operator">|</span> bytes starts-with 0x<span class="token punctuation">[</span>1F<span class="token punctuation">]</span>
</code></pre></div><p>Checks if binary starts with <code>0x[1F]</code></p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> 0x<span class="token punctuation">[</span>1F FF AA AA<span class="token punctuation">]</span> <span class="token operator">|</span> bytes starts-with 0x<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span>
</code></pre></div>`,11);function k(s,_){return o(),c("div",null,[a("h1",i,[l,d,a("code",null,t(s.$frontmatter.title),1),h]),a("div",u,t(s.$frontmatter.bytes),1),b])}const x=n(p,[["render",k],["__file","bytes_starts-with.html.vue"]]);export{x as default};
