import{_ as a,M as o,p as d,q as r,Q as e,t,N as s,U as i,a1 as l}from"./framework-344bb0e4.js";const c={},u=e("h1",{id:"befehls-signatur",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#befehls-signatur","aria-hidden":"true"},"#"),t(" Befehls Signatur")],-1),g=e("code",null,"str distance",-1),h=l(`<div class="language-text" data-ext="text"><pre class="language-text"><code>Signatures(Cell paths are supported):
  &lt;string&gt; | str distance &lt;string&gt; -&gt; &lt;int&gt;
</code></pre></div><p>Der erste Typenname vor dem <code>|</code> beschreibt den Typ der Eingangs-Pipeline. Nach dem Befehlsnamen folgt der benötigte Arguments Typ. Der Output-Typ ist in diesem Falle <code>int</code> und wird nach dem <code>-&gt;</code> ausgegeben. <code>(Cell paths are supported)</code> zeigt an, dass Zell Pfade angegeben werden können für <code>str distance</code>. So kann in einer verschachtelten Struktur oder Tabelle einem Zell Pfad eine Operation hinzugefügt und wie hier der Spaltenname ersetzt werden: <code>ls | str distance &#39;nushell&#39; &#39;name&#39;</code></p>`,2),_=e("code",null,"str join",-1),m=e("div",{class:"language-text","data-ext":"text"},[e("pre",{class:"language-text"},[e("code",null,`Signatures:
  list<string> | str join <string?> -> <string>
`)])],-1),p=e("code",null,"str join",-1),f=e("code",null,"string",-1),x=e("code",null,"string",-1),b=e("code",null,"<nothing>",-1),w=e("code",null,"null",-1),k=e("code",null,"rm",-1);function v(B,S){const n=o("RouterLink");return d(),r("div",null,[u,e("p",null,[t("Nu Befehle enthalten einen Signatur Abschnitt. Zum Beispiel wie hier in "),s(n,{to:"/commands/docs/str_distance.html"},{default:i(()=>[g]),_:1}),t(":")]),h,e("p",null,[t("Hier ein weiteres Beispiel, "),s(n,{to:"/commands/docs/str_join.html"},{default:i(()=>[_]),_:1}),t(":")]),m,e("p",null,[t("Hier bedeutet die Signatur von "),s(n,{to:"/commands/docs/str_join.html"},{default:i(()=>[p]),_:1}),t(", dass eine Liste von Texten als Eingang erwartet wird. Der Befehl nimmt ausserdem optionale "),f,t(" Typ Argumente entgegen. Schliesslich wird ein "),x,t(" als Output generiert.")]),e("p",null,[t("Einige Befehle akzeptieren oder benötigen keine Daten in einer Pipeline, weshalb ihr Input-Typ "),b,t(" sein wird. Dies gilt auch, wenn der Output Typ "),w,t(" zurückgiebt (e.g. "),s(n,{to:"/commands/docs/rm.html"},{default:i(()=>[k]),_:1}),t(").")])])}const y=a(c,[["render",v],["__file","command_signature.html.vue"]]);export{y as default};
