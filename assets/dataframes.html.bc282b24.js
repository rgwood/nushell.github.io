import{_ as o,r as p,o as c,c as l,a,b as e,d as n,e as t}from"./app.43db386a.js";const r={},u=a("h1",{id:"dataframes",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#dataframes","aria-hidden":"true"},"#"),n(" Dataframes")],-1),i=a("blockquote",null,[a("p",null,"Note. The dataframe commands are available from version 0.33.1 onwards")],-1),m=a("p",null,[n("As we have seen so far, nushell makes working with data its main priority. "),a("code",null,"Lists"),n(" and "),a("code",null,"Tables"),n(" are there to help you cycle through values in order to perform multiple operations or find data in a breeze. However, there are certain operations where a row-based data layout is not the most efficient way to process data, especially when working with extremely large files. Operations like group-by or join using large datasets can be costly memory-wise, and may lead to large computation times if they are not done using the appropriate data format.")],-1),k=n("For this reason, the "),d=a("code",null,"DataFrame",-1),b=n(" structure was introduced to nushell. A "),h=a("code",null,"DataFrame",-1),f=n(" stores its data in a columnar format using as its base the "),g={href:"https://arrow.apache.org/",target:"_blank",rel:"noopener noreferrer"},v=n("Apache Arrow"),w=n(" specification, and uses "),_={href:"https://github.com/pola-rs/polars",target:"_blank",rel:"noopener noreferrer"},y=n("Polars"),x=n(" as the motor for performing extremely "),$={href:"https://h2oai.github.io/db-benchmark/",target:"_blank",rel:"noopener noreferrer"},D=n("fast columnar operations"),S=n("."),q=a("p",null,"You may be wondering now how fast this combo could be, and how could it make working with data easier and more reliable. For this reason, let's start this page by presenting benchmarks on common operations that are done when processing data.",-1),F=a("h2",{id:"benchmark-comparisons",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#benchmark-comparisons","aria-hidden":"true"},"#"),n(" Benchmark comparisons")],-1),A=n("For this little benchmark exercise we will be comparing native nushell commands, dataframe nushell commands and "),T={href:"https://pandas.pydata.org/",target:"_blank",rel:"noopener noreferrer"},N=n("Python Pandas"),C=n(" commands. For the time being don't pay too much attention to the "),L=a("code",null,"dataframe",-1),j=n(" commands. They will be explained in later sections of this page."),I=a("blockquote",null,[a("p",null,"System Details: The benchmarks presented in this section were run using a machine with a processor Intel(R) Core(TM) i7-10710U (CPU @1.10GHz 1.61 GHz) and 16 gb of RAM."),a("p",null,"All examples where run on Nushell version 0.33.1.")],-1),W=a("h3",{id:"file-information",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#file-information","aria-hidden":"true"},"#"),n(" File information")],-1),B=n("The file that we will be using for the benchmarks is the "),O={href:"https://www.stats.govt.nz/assets/Uploads/New-Zealand-business-demography-statistics/New-Zealand-business-demography-statistics-At-February-2020/Download-data/Geographic-units-by-industry-and-statistical-area-2000-2020-descending-order-CSV.zip",target:"_blank",rel:"noopener noreferrer"},R=n("New Zealand business demography"),G=n(" dataset. Feel free to download it if you want to follow these tests."),Y=t(`<p>The dataset has 5 columns and 5,429,252 rows. We can check that by using the <code>dataframe list</code> command:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> <span class="token function">df</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dataframe <span class="token function">open</span> .<span class="token punctuation">\\</span>Data7602DescendingYearOrder.csv<span class="token punctuation">)</span>
<span class="token operator">&gt;</span> dataframe list

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502 name \u2502  rows   \u2502 columns \u2502             location</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502 <span class="token variable">$df</span>  \u2502 <span class="token number">5429252</span> \u2502 <span class="token number">5</span>       \u2502 .<span class="token punctuation">\\</span>Data7602DescendingYearOrder.csv
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><p>We can have a look at the first lines of the file using <code>dataframe first</code>:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token variable">$df</span> <span class="token operator">|</span> dataframe first

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502 anzsic06 \u2502  Area   \u2502 year \u2502 geo_count \u2502 ec_count</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502 A        \u2502 A100100 \u2502 <span class="token number">2000</span> \u2502        <span class="token number">96</span> \u2502      <span class="token number">130</span>
 <span class="token number">1</span> \u2502 A        \u2502 A100200 \u2502 <span class="token number">2000</span> \u2502       <span class="token number">198</span> \u2502      <span class="token number">110</span>
 <span class="token number">2</span> \u2502 A        \u2502 A100300 \u2502 <span class="token number">2000</span> \u2502        <span class="token number">42</span> \u2502       <span class="token number">25</span>
 <span class="token number">3</span> \u2502 A        \u2502 A100400 \u2502 <span class="token number">2000</span> \u2502        <span class="token number">66</span> \u2502       <span class="token number">40</span>
 <span class="token number">4</span> \u2502 A        \u2502 A100500 \u2502 <span class="token number">2000</span> \u2502        <span class="token number">63</span> \u2502       <span class="token number">40</span>
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><p>...and finally, we can get an idea of the inferred datatypes:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token variable">$df</span> <span class="token operator">|</span> dataframe dtypes

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502  column   \u2502 dtype</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502 anzsic06  \u2502 str
 <span class="token number">1</span> \u2502 Area      \u2502 str
 <span class="token number">2</span> \u2502 year      \u2502 i64
 <span class="token number">3</span> \u2502 geo_count \u2502 i64
 <span class="token number">4</span> \u2502 ec_count  \u2502 i64
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><h3 id="loading-the-file" tabindex="-1"><a class="header-anchor" href="#loading-the-file" aria-hidden="true">#</a> Loading the file</h3><p>Let&#39;s start by comparing loading times between the various methods. First, we will load the data using nushell load command:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> benchmark <span class="token punctuation">{</span>open .<span class="token punctuation">\\</span>Data7602DescendingYearOrder.csv<span class="token punctuation">}</span>

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502        real time</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502 30sec 479ms 614us 400ns
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><p>Loading the file using native nushell commands took 30 seconds. Not bad for loading five million records in order to do data analysis. But we can do a bit better than that.</p><p>Let&#39;s now use Pandas. We are going to use the next script to load the file:</p><div class="language-python ext-py"><pre class="language-python"><code><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd

df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">&quot;Data7602DescendingYearOrder.csv&quot;</span><span class="token punctuation">)</span>
</code></pre></div><p>And the benchmark for it is:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> benchmark <span class="token punctuation">{</span>python load.py<span class="token punctuation">}</span>

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502       real time</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502 2sec 91ms 872us 900ns
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><p>That is a great improvement, from 30 seconds to 2 seconds. Nicely done, Pandas!</p><p>Probably we can load the data a bit faster. This time we will use nushell&#39;s <code>dataframe open</code> command:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> benchmark <span class="token punctuation">{</span>dataframe <span class="token function">open</span> .<span class="token punctuation">\\</span>Data7602DescendingYearOrder.csv<span class="token punctuation">}</span>

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502     real time</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502 601ms 700us 700ns
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><p>This time it took us 0.6 seconds. Not bad at all.</p><h3 id="group-by-comparison" tabindex="-1"><a class="header-anchor" href="#group-by-comparison" aria-hidden="true">#</a> Group-by comparison</h3><p>Lets do a slightly more complex operation this time. We are going to group the data by year, and add groups using the column <code>geo_count</code>.</p><p>Again, we are going to start with nushell native command.</p><blockquote><p>Note: If you want to run this example, be aware that the next command will use a large amount of memory. This may affect the performance of you system while this is being executed.</p></blockquote><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> benchmark <span class="token punctuation">{</span>
	<span class="token function">open</span> .<span class="token punctuation">\\</span>Data7602DescendingYearOrder.csv
	<span class="token operator">|</span> group-by year
	<span class="token operator">|</span> pivot header rows
	<span class="token operator">|</span> update rows <span class="token punctuation">{</span> get rows <span class="token operator">|</span> math <span class="token function">sum</span> <span class="token punctuation">}</span>
	<span class="token operator">|</span> flatten
<span class="token punctuation">}</span>

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502       real time</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502 6min 30sec 622ms 312us
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><p>So, six minutes to perform this aggregated operation.</p><p>Let&#39;s try the same operation in pandas:</p><div class="language-python ext-py"><pre class="language-python"><code><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd

df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">&quot;Data7602DescendingYearOrder.csv&quot;</span><span class="token punctuation">)</span>
res <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">&quot;year&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&quot;geo_count&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
</code></pre></div><p>And the result from the benchmark is:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> benchmark <span class="token punctuation">{</span>python .<span class="token punctuation">\\</span>load.py<span class="token punctuation">}</span>

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502       real time</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502 1sec 966ms 954us 800ns
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><p>Not bad at all. Again, pandas managed to get it done in a fraction of the time.</p><p>To finish the comparison, let&#39;s try nushell dataframes. We are going to put all the operations in one <code>nu</code> file, to make sure we are doing similar operations:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token builtin class-name">let</span> <span class="token function">df</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dataframe <span class="token function">open</span> Data7602DescendingYearOrder.csv<span class="token punctuation">)</span>
<span class="token builtin class-name">let</span> res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$df</span> <span class="token operator">|</span> dataframe group-by year <span class="token operator">|</span> dataframe aggregate <span class="token function">sum</span> <span class="token operator">|</span> dataframe <span class="token keyword">select</span> geo_count<span class="token punctuation">)</span>
<span class="token variable">$res</span>
</code></pre></div><p>and the benchmark with dataframes is:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> benchmark <span class="token punctuation">{</span>source load.nu<span class="token punctuation">}</span>

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502     real time</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502 557ms 658us 500ns
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><p>Luckily nushell dataframes managed to halve the time again. Isn&#39;t that great?</p><p>As you can see, Nushell&#39;s <code>Dataframe</code> commands are as fast as the most common tools that exist today to do data analysis. The commands that are included in this release have the potential to become your go-to tool for doing data analysis. By composing complex nushell pipelines, you can extract information from data in a reliable way.</p><h2 id="working-with-dataframes" tabindex="-1"><a class="header-anchor" href="#working-with-dataframes" aria-hidden="true">#</a> Working with Dataframes</h2><p>After seeing a glimpse of the things that can be done with <code>Dataframe</code> commands, now it is time to start testing them. To begin let&#39;s create a sample CSV file that will become our sample dataframe that we will be using along with the examples. In your favorite file editor paste the next lines to create out sample csv file.</p><div class="language-csv ext-csv"><pre class="language-csv"><code><span class="token value">int_1</span><span class="token punctuation">,</span><span class="token value">int_2</span><span class="token punctuation">,</span><span class="token value">float_1</span><span class="token punctuation">,</span><span class="token value">float_2</span><span class="token punctuation">,</span><span class="token value">first</span><span class="token punctuation">,</span><span class="token value">second</span><span class="token punctuation">,</span><span class="token value">third</span><span class="token punctuation">,</span><span class="token value">word</span>
<span class="token value">1</span><span class="token punctuation">,</span><span class="token value">11</span><span class="token punctuation">,</span><span class="token value">0.1</span><span class="token punctuation">,</span><span class="token value">1.0</span><span class="token punctuation">,</span><span class="token value">a</span><span class="token punctuation">,</span><span class="token value">b</span><span class="token punctuation">,</span><span class="token value">c</span><span class="token punctuation">,</span><span class="token value">first</span>
<span class="token value">2</span><span class="token punctuation">,</span><span class="token value">12</span><span class="token punctuation">,</span><span class="token value">0.2</span><span class="token punctuation">,</span><span class="token value">1.0</span><span class="token punctuation">,</span><span class="token value">a</span><span class="token punctuation">,</span><span class="token value">b</span><span class="token punctuation">,</span><span class="token value">c</span><span class="token punctuation">,</span><span class="token value">second</span>
<span class="token value">3</span><span class="token punctuation">,</span><span class="token value">13</span><span class="token punctuation">,</span><span class="token value">0.3</span><span class="token punctuation">,</span><span class="token value">2.0</span><span class="token punctuation">,</span><span class="token value">a</span><span class="token punctuation">,</span><span class="token value">b</span><span class="token punctuation">,</span><span class="token value">c</span><span class="token punctuation">,</span><span class="token value">third</span>
<span class="token value">4</span><span class="token punctuation">,</span><span class="token value">14</span><span class="token punctuation">,</span><span class="token value">0.4</span><span class="token punctuation">,</span><span class="token value">3.0</span><span class="token punctuation">,</span><span class="token value">b</span><span class="token punctuation">,</span><span class="token value">a</span><span class="token punctuation">,</span><span class="token value">c</span><span class="token punctuation">,</span><span class="token value">second</span>
<span class="token value">0</span><span class="token punctuation">,</span><span class="token value">15</span><span class="token punctuation">,</span><span class="token value">0.5</span><span class="token punctuation">,</span><span class="token value">4.0</span><span class="token punctuation">,</span><span class="token value">b</span><span class="token punctuation">,</span><span class="token value">a</span><span class="token punctuation">,</span><span class="token value">a</span><span class="token punctuation">,</span><span class="token value">third</span>
<span class="token value">6</span><span class="token punctuation">,</span><span class="token value">16</span><span class="token punctuation">,</span><span class="token value">0.6</span><span class="token punctuation">,</span><span class="token value">5.0</span><span class="token punctuation">,</span><span class="token value">b</span><span class="token punctuation">,</span><span class="token value">a</span><span class="token punctuation">,</span><span class="token value">a</span><span class="token punctuation">,</span><span class="token value">second</span>
<span class="token value">7</span><span class="token punctuation">,</span><span class="token value">17</span><span class="token punctuation">,</span><span class="token value">0.7</span><span class="token punctuation">,</span><span class="token value">6.0</span><span class="token punctuation">,</span><span class="token value">b</span><span class="token punctuation">,</span><span class="token value">c</span><span class="token punctuation">,</span><span class="token value">a</span><span class="token punctuation">,</span><span class="token value">third</span>
<span class="token value">8</span><span class="token punctuation">,</span><span class="token value">18</span><span class="token punctuation">,</span><span class="token value">0.8</span><span class="token punctuation">,</span><span class="token value">7.0</span><span class="token punctuation">,</span><span class="token value">c</span><span class="token punctuation">,</span><span class="token value">c</span><span class="token punctuation">,</span><span class="token value">b</span><span class="token punctuation">,</span><span class="token value">eight</span>
<span class="token value">9</span><span class="token punctuation">,</span><span class="token value">19</span><span class="token punctuation">,</span><span class="token value">0.9</span><span class="token punctuation">,</span><span class="token value">8.0</span><span class="token punctuation">,</span><span class="token value">c</span><span class="token punctuation">,</span><span class="token value">c</span><span class="token punctuation">,</span><span class="token value">b</span><span class="token punctuation">,</span><span class="token value">ninth</span>
<span class="token value">0</span><span class="token punctuation">,</span><span class="token value">10</span><span class="token punctuation">,</span><span class="token value">0.0</span><span class="token punctuation">,</span><span class="token value">9.0</span><span class="token punctuation">,</span><span class="token value">c</span><span class="token punctuation">,</span><span class="token value">c</span><span class="token punctuation">,</span><span class="token value">b</span><span class="token punctuation">,</span><span class="token value">ninth</span>
</code></pre></div><p>Save the file and name it however you want to, for the sake of these examples the file will be called <code>test_small.csv</code>.</p><p>Now, to read that file as a dataframe use the <code>dataframe open</code> command like this:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> <span class="token function">df</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dataframe <span class="token function">open</span> test_small.csv<span class="token punctuation">)</span>
</code></pre></div><p>This should create the value <code>df</code> in memory which holds the data we just created.</p><blockquote><p>Note: The command <code>dataframes open</code> can read either <strong>csv</strong> or <strong>parquet</strong> files.</p></blockquote><p>To see all the dataframes that are stored in memory you can use</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> dataframe list

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502 name \u2502 rows \u2502 columns \u2502        location</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502 <span class="token variable">$df</span>  \u2502 <span class="token number">10</span>   \u2502 <span class="token number">8</span>       \u2502 <span class="token punctuation">..</span><span class="token punctuation">\\</span>test_small.csv
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><p>As you can see, the command shows the created dataframes together with basic information about them.</p><p>And if you want to see a preview of the loaded dataframe you can send the dataframe variable to the stream</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token variable">$df</span>

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502 int_1 \u2502 int_2 \u2502 float_1 \u2502 float_2 \u2502 first \u2502 second \u2502 third \u2502  word</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502     <span class="token number">1</span> \u2502    <span class="token number">11</span> \u2502  <span class="token number">0.1000</span> \u2502  <span class="token number">1.0000</span> \u2502 a     \u2502 b      \u2502 c     \u2502 first
 <span class="token number">1</span> \u2502     <span class="token number">2</span> \u2502    <span class="token number">12</span> \u2502  <span class="token number">0.2000</span> \u2502  <span class="token number">1.0000</span> \u2502 a     \u2502 b      \u2502 c     \u2502 second
 <span class="token number">2</span> \u2502     <span class="token number">3</span> \u2502    <span class="token number">13</span> \u2502  <span class="token number">0.3000</span> \u2502  <span class="token number">2.0000</span> \u2502 a     \u2502 b      \u2502 c     \u2502 third
 <span class="token number">3</span> \u2502     <span class="token number">4</span> \u2502    <span class="token number">14</span> \u2502  <span class="token number">0.4000</span> \u2502  <span class="token number">3.0000</span> \u2502 b     \u2502 a      \u2502 c     \u2502 second
 <span class="token number">4</span> \u2502     <span class="token number">0</span> \u2502    <span class="token number">15</span> \u2502  <span class="token number">0.5000</span> \u2502  <span class="token number">4.0000</span> \u2502 b     \u2502 a      \u2502 a     \u2502 third
 <span class="token number">5</span> \u2502     <span class="token number">6</span> \u2502    <span class="token number">16</span> \u2502  <span class="token number">0.6000</span> \u2502  <span class="token number">5.0000</span> \u2502 b     \u2502 a      \u2502 a     \u2502 second
 <span class="token number">6</span> \u2502     <span class="token number">7</span> \u2502    <span class="token number">17</span> \u2502  <span class="token number">0.7000</span> \u2502  <span class="token number">6.0000</span> \u2502 b     \u2502 c      \u2502 a     \u2502 third
 <span class="token number">7</span> \u2502     <span class="token number">8</span> \u2502    <span class="token number">18</span> \u2502  <span class="token number">0.8000</span> \u2502  <span class="token number">7.0000</span> \u2502 c     \u2502 c      \u2502 b     \u2502 eight
 <span class="token number">8</span> \u2502     <span class="token number">9</span> \u2502    <span class="token number">19</span> \u2502  <span class="token number">0.9000</span> \u2502  <span class="token number">8.0000</span> \u2502 c     \u2502 c      \u2502 b     \u2502 ninth
 <span class="token number">9</span> \u2502     <span class="token number">0</span> \u2502    <span class="token number">10</span> \u2502  <span class="token number">0.0000</span> \u2502  <span class="token number">9.0000</span> \u2502 c     \u2502 c      \u2502 b     \u2502 ninth
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><p>With the dataframe in memory we can start doing column operations with the <code>DataFrame</code></p><blockquote><p>Note: If you want to see all the dataframe commands that are available you can use <code>help dataframe</code></p></blockquote><h2 id="basic-aggregations" tabindex="-1"><a class="header-anchor" href="#basic-aggregations" aria-hidden="true">#</a> Basic aggregations</h2><p>Let&#39;s start with basic aggregations on the dataframe. Let&#39;s sum all the columns that exist in <code>df</code> by using the <code>aggregate</code> command</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token variable">$df</span> <span class="token operator">|</span> dataframe aggregate <span class="token function">sum</span>

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502 int_1 \u2502 int_2 \u2502 float_1 \u2502 float_2 \u2502 first \u2502 second \u2502 third \u2502 word</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502    <span class="token number">40</span> \u2502   <span class="token number">145</span> \u2502  <span class="token number">4.5000</span> \u2502 <span class="token number">46.0000</span> \u2502       \u2502        \u2502       \u2502
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><p>As you can see, the aggregate function computes the sum for those columns where a sum makes sense. If you want to filter out the text column, you can select the columns you want by using the <code>select</code> command</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token variable">$df</span> <span class="token operator">|</span> dataframe aggregate <span class="token function">sum</span> <span class="token operator">|</span> dataframe <span class="token keyword">select</span> int_1 int_2 float_1 float_2

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502 int_1 \u2502 int_2 \u2502 float_1 \u2502 float_2</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502    <span class="token number">40</span> \u2502   <span class="token number">145</span> \u2502  <span class="token number">4.5000</span> \u2502 <span class="token number">46.0000</span>
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><p>you can even store the result from this aggregation as you would store any other nushell variable</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$df</span> <span class="token operator">|</span> dataframe aggregate <span class="token function">sum</span> <span class="token operator">|</span> dataframe <span class="token keyword">select</span> int_1 int_2 float_1 float_2<span class="token punctuation">)</span>
</code></pre></div><p>and now we have two dataframes stored in memory</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> dataframe list

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502 name \u2502 rows \u2502 columns \u2502        location</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502 <span class="token variable">$df</span>  \u2502 <span class="token number">10</span>   \u2502 <span class="token number">8</span>       \u2502 <span class="token punctuation">..</span><span class="token punctuation">\\</span>test_small.csv
 <span class="token number">1</span> \u2502 <span class="token variable">$res</span> \u2502 <span class="token number">1</span>    \u2502 <span class="token number">4</span>       \u2502 stream
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><p>pretty neat, isn&#39;t it?</p><p>You can perform several aggregations on the dataframe in order to extract basic information from the dataframe and do basic data analysis on your brand new dataframe.</p><h2 id="joining-a-dataframe" tabindex="-1"><a class="header-anchor" href="#joining-a-dataframe" aria-hidden="true">#</a> Joining a DataFrame</h2><p>It is also possible to join two dataframes using a column as reference. We are going to join our mini dataframe with another mini dataframe. Copy these lines in another file and create the corresponding dataframe (for these examples we are going to call it <code>test_small_a.csv</code>)</p><div class="language-text ext-text"><pre class="language-text"><code>int_1a,int_2,float_1,float_2,first
9,14,0.4,3.0,a
8,13,0.3,2.0,a
7,12,0.2,1.0,a
6,11,0.1,0.0,b
</code></pre></div><p>We use the <code>dataframe open</code> command to create the new variable</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> df_a <span class="token operator">=</span> <span class="token punctuation">(</span>dataframe <span class="token function">open</span> test_small_a.csv<span class="token punctuation">)</span>
</code></pre></div><p>Now, with the second dataframe loaded in memory we can join them using the column called <code>int_1</code> from the left dataframe and the column <code>int_1a</code> from the right dataframe</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token variable">$df</span> <span class="token operator">|</span> dataframe <span class="token function">join</span> <span class="token variable">$df_a</span> -l <span class="token punctuation">[</span>int_1<span class="token punctuation">]</span> -r <span class="token punctuation">[</span>int_1a<span class="token punctuation">]</span>

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502 int_1 \u2502 int_2 \u2502 float_1 \u2502 float_2 \u2502 first \u2502 second \u2502 third \u2502  word   \u2502 int_2_right \u2502 float_1_right \u2502 float_2_right \u2502 first_right</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502     <span class="token number">6</span> \u2502    <span class="token number">16</span> \u2502  <span class="token number">0.6000</span> \u2502  <span class="token number">5.0000</span> \u2502 b     \u2502 a      \u2502 a     \u2502 second  \u2502          <span class="token number">11</span> \u2502        <span class="token number">0.1000</span> \u2502        <span class="token number">0.0000</span> \u2502 b
 <span class="token number">1</span> \u2502     <span class="token number">7</span> \u2502    <span class="token number">17</span> \u2502  <span class="token number">0.7000</span> \u2502  <span class="token number">6.0000</span> \u2502 b     \u2502 c      \u2502 a     \u2502 third   \u2502          <span class="token number">12</span> \u2502        <span class="token number">0.2000</span> \u2502        <span class="token number">1.0000</span> \u2502 a
 <span class="token number">2</span> \u2502     <span class="token number">8</span> \u2502    <span class="token number">18</span> \u2502  <span class="token number">0.8000</span> \u2502  <span class="token number">7.0000</span> \u2502 c     \u2502 c      \u2502 b     \u2502 eight   \u2502          <span class="token number">13</span> \u2502        <span class="token number">0.3000</span> \u2502        <span class="token number">2.0000</span> \u2502 a
 <span class="token number">3</span> \u2502     <span class="token number">9</span> \u2502    <span class="token number">19</span> \u2502  <span class="token number">0.9000</span> \u2502  <span class="token number">8.0000</span> \u2502 c     \u2502 c      \u2502 b     \u2502 ninth   \u2502          <span class="token number">14</span> \u2502        <span class="token number">0.4000</span> \u2502        <span class="token number">3.0000</span> \u2502 a
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><blockquote><p>Note: In <code>Nu</code> when a command has multiple arguments that are expecting multiple values we use brackets <code>[]</code> to enclose those values. In the case of <code>dataframe join</code> we can join on multiple columns as long as they have the same type, for example we could have done <code>$df | dataframe join $df_a -l [int_1 int_2] -r [int_1a int_2]</code></p></blockquote><p>By default, the join command does an inner join, meaning that it will keep the rows where both dataframes share the same value. You can select a left join to keep the missing rows from the left dataframe. You can also save this result in order to use it for further operations.</p><h2 id="dataframe-group-by" tabindex="-1"><a class="header-anchor" href="#dataframe-group-by" aria-hidden="true">#</a> DataFrame group-by</h2><p>One of the most powerful operations that can be performed with a DataFrame is the <code>group-by</code>. This command will allow you to perform aggregation operations based on a grouping criteria. In nushell, a <code>GroupBy</code> is a type of object that can be stored and reused for multiple aggregations. This is quite handy, since the creation of the grouped pairs is the most expensive operation while doing group-by and there is no need to repeat it if you are planning to do multiple operations with the same group condition.</p><p>To create a <code>GroupBy</code> object you only need to use the <code>group-by</code> command</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> group <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$df</span> <span class="token operator">|</span> dataframe group-by first<span class="token punctuation">)</span>
<span class="token operator">&gt;</span> <span class="token variable">$group</span>

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502 property \u2502 value</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502 group by \u2502 first
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><p>When printing the <code>GroupBy</code> object we can see the columns that are used as criteria to group the dataframe. Using the <code>GroupBy</code> we can aggregate the dataframe using multiple operations</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token variable">$group</span> <span class="token operator">|</span> dataframe aggregate <span class="token function">sum</span>

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502 first \u2502 int_1     \u2502 int_2     \u2502 float_1     \u2502 float_2</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502 a     \u2502         <span class="token number">6</span> \u2502        <span class="token number">36</span> \u2502      <span class="token number">0.6000</span> \u2502      <span class="token number">4.0000</span>
 <span class="token number">1</span> \u2502 b     \u2502        <span class="token number">17</span> \u2502        <span class="token number">62</span> \u2502      <span class="token number">2.2000</span> \u2502     <span class="token number">18.0000</span>
 <span class="token number">2</span> \u2502 c     \u2502        <span class="token number">17</span> \u2502        <span class="token number">47</span> \u2502      <span class="token number">1.7000</span> \u2502     <span class="token number">24.0000</span>
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><p>and using the same <code>GroupBy</code> you can perform now another operation on the whole dataframe, like <code>min</code> in this case</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token variable">$group</span> <span class="token operator">|</span> aggregate min

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502 first \u2502 int_1     \u2502 int_2     \u2502 float_1     \u2502 float_2</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502 a     \u2502         <span class="token number">1</span> \u2502        <span class="token number">11</span> \u2502      <span class="token number">0.1000</span> \u2502      <span class="token number">1.0000</span>
 <span class="token number">1</span> \u2502 b     \u2502         <span class="token number">0</span> \u2502        <span class="token number">14</span> \u2502      <span class="token number">0.4000</span> \u2502      <span class="token number">3.0000</span>
 <span class="token number">2</span> \u2502 c     \u2502         <span class="token number">0</span> \u2502        <span class="token number">10</span> \u2502      <span class="token number">0.0000</span> \u2502      <span class="token number">7.0000</span>
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><p>the created <code>GroupBy</code> object is so handy that it can even be used as base for pivoting a table. As an example, Lets use the column called <code>second</code> as the pivot column and the column <code>float_1</code> as the value column</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token variable">$group</span> <span class="token operator">|</span> dataframe pivot second float_1 <span class="token function">sum</span>

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502 first \u2502   b    \u2502   a    \u2502   c</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502 a     \u2502 <span class="token number">0.6000</span> \u2502        \u2502
 <span class="token number">1</span> \u2502 c     \u2502        \u2502        \u2502 <span class="token number">1.7000</span>
 <span class="token number">2</span> \u2502 b     \u2502        \u2502 <span class="token number">1.5000</span> \u2502 <span class="token number">0.7000</span>
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><blockquote><p>Note: a pivot operation is a way to aggregate data based on two columns. In the previous example, the result of the pivot command produced a table that represents the sum of all the values in the column <code>float_1</code> that are shared between columns <code>first</code> (now the rows) and <code>second</code> (now the columns). So, the value of <code>1.5</code> shown in row <code>b</code> and column <code>a</code> is the sum of all the floats where the column <code>first</code> is <code>b</code> and column <code>second</code> is <code>a</code></p></blockquote><p>As you can see, the <code>GroupBy</code> object is a very powerful variable and it is worthy it to keep in memory to keep exploring your dataset.</p><h2 id="creating-dataframes" tabindex="-1"><a class="header-anchor" href="#creating-dataframes" aria-hidden="true">#</a> Creating Dataframes</h2><p>It is also possible to construct dataframes from basic nushell primitives, such as integers, decimals, or strings. Let&#39;s create a small dataframe using the command <code>to-df</code>.</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>a b<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">5</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">|</span> dataframe to-df<span class="token punctuation">)</span>
<span class="token operator">&gt;</span> <span class="token variable">$a</span>

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u252C\u2500\u2500\u2500
 <span class="token comment"># \u2502 b \u2502 a</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u253C\u2500\u2500\u2500
 <span class="token number">0</span> \u2502 <span class="token number">2</span> \u2502 <span class="token number">1</span>
 <span class="token number">1</span> \u2502 <span class="token number">4</span> \u2502 <span class="token number">3</span>
 <span class="token number">2</span> \u2502 <span class="token number">6</span> \u2502 <span class="token number">5</span>
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500
</code></pre></div><blockquote><p>Note: For the time being, not all of Nushell primitives can be converted into a dataframe. This will change in the future, as the dataframe feature matures</p></blockquote><p>We can append columns to a dataframe in order to create a new variable. As an example, let&#39;s append two columns to our mini dataframe <code>$a</code></p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> a2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">|</span> dataframe with-column <span class="token variable">$a</span>.a --name a2 <span class="token operator">|</span> dataframe with-column <span class="token variable">$a</span>.a --name a3<span class="token punctuation">)</span>

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502 b \u2502 a \u2502 a2 \u2502 a3</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502 <span class="token number">2</span> \u2502 <span class="token number">1</span> \u2502  <span class="token number">1</span> \u2502  <span class="token number">1</span>
 <span class="token number">1</span> \u2502 <span class="token number">4</span> \u2502 <span class="token number">3</span> \u2502  <span class="token number">3</span> \u2502  <span class="token number">3</span>
 <span class="token number">2</span> \u2502 <span class="token number">6</span> \u2502 <span class="token number">5</span> \u2502  <span class="token number">5</span> \u2502  <span class="token number">5</span>
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500
</code></pre></div><p>the powerful Nushell&#39;s piping syntax allows us to create new dataframes by taking data from other dataframes and append it to them. Now, if you list your dataframes you will see in total four dataframes</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> dataframe list

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502  name \u2502 rows \u2502 columns \u2502        location</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502 <span class="token variable">$a</span>    \u2502 <span class="token number">3</span>    \u2502 <span class="token number">2</span>       \u2502 stream
 <span class="token number">1</span> \u2502 <span class="token variable">$a2</span>   \u2502 <span class="token number">3</span>    \u2502 <span class="token number">4</span>       \u2502 stream
 <span class="token number">2</span> \u2502 <span class="token variable">$df_a</span> \u2502 <span class="token number">4</span>    \u2502 <span class="token number">5</span>       \u2502 <span class="token punctuation">..</span><span class="token punctuation">\\</span>test_small.csv
 <span class="token number">3</span> \u2502 <span class="token variable">$df</span>   \u2502 <span class="token number">10</span>   \u2502 <span class="token number">8</span>       \u2502 <span class="token punctuation">..</span><span class="token punctuation">\\</span>test_small.csv
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div>`,90),z=n("One thing that is important to mention is how the memory is being optimized while working with dataframes, and this is thanks to "),P=a("strong",null,"Apache Arrow",-1),H=n(" and "),U=a("strong",null,"Polars",-1),V=n(". In a very simple representation, each column in a DataFrame is an Arrow Array, which is using several memory specifications in order to maintain the data as packed as possible (check "),E={href:"https://arrow.apache.org/docs/format/Columnar.html",target:"_blank",rel:"noopener noreferrer"},Z=n("Arrow columnar format"),J=n("). The other optimization trick is the fact that whenever possible, the columns from the dataframes are shared between dataframes, avoiding memory duplication for the same data. This means that dataframes "),M=a("code",null,"$a",-1),K=n(" and "),Q=a("code",null,"$a2",-1),X=n(" are sharing the same two columns we created using the "),aa=a("code",null,"to-df",-1),na=n(" command. For this reason, it isn't possible to change the value of a column in a dataframe. However, you can create new columns based on data from other columns or dataframes."),sa=t(`<h2 id="working-with-series" tabindex="-1"><a class="header-anchor" href="#working-with-series" aria-hidden="true">#</a> Working with Series</h2><p>A <code>Series</code> is the building block of a <code>DataFrame</code>. Each Series represents a column with the same data type, and we can create multiple Series of different types, such as float, int or string.</p><p>Let&#39;s start our exploration with Series by creating one using the <code>to-df</code> command:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> new <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">9</span> <span class="token number">8</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">|</span> dataframe to-df<span class="token punctuation">)</span>
<span class="token operator">&gt;</span> <span class="token variable">$new</span>

\u2500\u2500\u2500\u252C\u2500\u2500\u2500
 <span class="token comment"># \u2502 0</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500
 <span class="token number">0</span> \u2502 <span class="token number">9</span>
 <span class="token number">1</span> \u2502 <span class="token number">8</span>
 <span class="token number">2</span> \u2502 <span class="token number">4</span>
\u2500\u2500\u2500\u2534\u2500\u2500\u2500
</code></pre></div><p>We have created a new series from a list of integers (we could have done the same using floats or strings)</p><p>Series have their own basic operations defined, and they can be used to create other Series. Let&#39;s create a new Series by doing some arithmetic on the previously created column.</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> new_2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$new</span> * <span class="token number">3</span> + <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token operator">&gt;</span> <span class="token variable">$new_2</span>

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502 0</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502 <span class="token number">37</span>
 <span class="token number">1</span> \u2502 <span class="token number">34</span>
 <span class="token number">2</span> \u2502 <span class="token number">22</span>
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500
</code></pre></div><p>Now we have a new Series that was constructed by doing basic operations on the previous variable.</p><blockquote><p>Note: If you want to see how many variables you have stored in memory you can use <code>$scope.variables</code></p></blockquote><p>Lets rename our previous Series so it has a memorable name</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> new_2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$new_2</span> <span class="token operator">|</span> dataframe <span class="token function">rename</span> memorable<span class="token punctuation">)</span>
<span class="token operator">&gt;</span> <span class="token variable">$new_2</span>

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502 memorable</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502        <span class="token number">37</span>
 <span class="token number">1</span> \u2502        <span class="token number">34</span>
 <span class="token number">2</span> \u2502        <span class="token number">22</span>
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><p>We can also do basic operations with two Series as long as they have the same data type</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token variable">$new</span> - <span class="token variable">$new_2</span>

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502 sub_0_0</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502     -28
 <span class="token number">1</span> \u2502     -26
 <span class="token number">2</span> \u2502     -18
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><p>And we can add them to previously defined dataframes</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> new_df <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">|</span> dataframe with-column <span class="token variable">$new</span> --name new_col<span class="token punctuation">)</span>
<span class="token operator">&gt;</span> <span class="token variable">$new_df</span>

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502 b \u2502 a \u2502 new_col</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502 <span class="token number">2</span> \u2502 <span class="token number">1</span> \u2502       <span class="token number">9</span>
 <span class="token number">1</span> \u2502 <span class="token number">4</span> \u2502 <span class="token number">3</span> \u2502       <span class="token number">8</span>
 <span class="token number">2</span> \u2502 <span class="token number">6</span> \u2502 <span class="token number">5</span> \u2502       <span class="token number">4</span>
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><p>The Series stored in a Dataframe can also be used directly, for example, we can multiply columns <code>a</code> and <code>b</code> to create a new Series</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token variable">$new_df</span>.a * <span class="token variable">$new_df</span>.b

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502 mul_a_b</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502       <span class="token number">2</span>
 <span class="token number">1</span> \u2502      <span class="token number">12</span>
 <span class="token number">2</span> \u2502      <span class="token number">30</span>
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><p>and we can start piping things in order to create new columns and dataframes</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> <span class="token variable">$new_df</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$new_df</span> <span class="token operator">|</span> dataframe with-column <span class="token punctuation">(</span><span class="token variable">$new_df</span>.a * <span class="token variable">$new_df</span>.b / <span class="token variable">$new_df</span>.new_col<span class="token punctuation">)</span> --name my_sum<span class="token punctuation">)</span>
<span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> <span class="token variable">$new_df</span>

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502 b \u2502 a \u2502 new_col \u2502 my_sum</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502 <span class="token number">2</span> \u2502 <span class="token number">1</span> \u2502       <span class="token number">9</span> \u2502      <span class="token number">0</span>
 <span class="token number">1</span> \u2502 <span class="token number">4</span> \u2502 <span class="token number">3</span> \u2502       <span class="token number">8</span> \u2502      <span class="token number">1</span>
 <span class="token number">2</span> \u2502 <span class="token number">6</span> \u2502 <span class="token number">5</span> \u2502       <span class="token number">4</span> \u2502      <span class="token number">7</span>
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><p>Nushell piping system can help you create very interesting workflows.</p><h2 id="series-and-masks" tabindex="-1"><a class="header-anchor" href="#series-and-masks" aria-hidden="true">#</a> Series and masks</h2><p>Series have another key use in when working with DataFrames, and it is the fact that we can build boolean masks out of them. Lets start by creating a simple mask using the equality operator</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> mask <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$new</span> <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">)</span>
<span class="token operator">&gt;</span> <span class="token variable">$mask</span>

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502 new_col</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502 <span class="token boolean">false</span>
 <span class="token number">1</span> \u2502 <span class="token boolean">true</span>
 <span class="token number">2</span> \u2502 <span class="token boolean">false</span>
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><p>and with this mask we can now filter a dataframe, like this</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token variable">$new_df</span> <span class="token operator">|</span> dataframe filter-with <span class="token variable">$mask</span>

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502 a \u2502 b \u2502 new_col \u2502 my_sum</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502 <span class="token number">3</span> \u2502 <span class="token number">4</span> \u2502       <span class="token number">8</span> \u2502      <span class="token number">1</span>
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><p>Now we have a new dataframe with only the values where the mask was true.</p><p>The masks can also be created from Nushell lists as well, for example:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> mask1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">$true</span> <span class="token variable">$true</span> <span class="token variable">$false</span><span class="token punctuation">]</span> <span class="token operator">|</span> dataframe to-df mask<span class="token punctuation">)</span>
<span class="token operator">&gt;</span> <span class="token variable">$new_df</span> <span class="token operator">|</span> dataframe filter-with <span class="token variable">$mask1</span>

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502 a \u2502 b \u2502 new_col \u2502 my_sum</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502 <span class="token number">1</span> \u2502 <span class="token number">2</span> \u2502       <span class="token number">9</span> \u2502      <span class="token number">0</span>
 <span class="token number">1</span> \u2502 <span class="token number">3</span> \u2502 <span class="token number">4</span> \u2502       <span class="token number">8</span> \u2502      <span class="token number">1</span>
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><p>To create complex masks, we have the <code>AND</code></p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token variable">$mask</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$mask1</span>

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502 and_new_col_mask</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502 <span class="token boolean">false</span>
 <span class="token number">1</span> \u2502 <span class="token boolean">true</span>
 <span class="token number">2</span> \u2502 <span class="token boolean">false</span>
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><p>and <code>OR</code> operations</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token variable">$mask</span> <span class="token operator">||</span> <span class="token variable">$mask1</span>

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502 or_new_col_mask</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502 <span class="token boolean">true</span>
 <span class="token number">1</span> \u2502 <span class="token boolean">true</span>
 <span class="token number">2</span> \u2502 <span class="token boolean">false</span>
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><p>We can also create a mask by checking if some values exist in other Series. Using the first dataframe that we created we can do something like this</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> mask3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$df</span>.first <span class="token operator">|</span> dataframe is-in <span class="token punctuation">(</span><span class="token punctuation">[</span>b c<span class="token punctuation">]</span> <span class="token operator">|</span> dataframe to-df<span class="token punctuation">))</span>

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502 first</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502 <span class="token boolean">false</span>
 <span class="token number">1</span> \u2502 <span class="token boolean">false</span>
 <span class="token number">2</span> \u2502 <span class="token boolean">false</span>
 <span class="token number">3</span> \u2502 <span class="token boolean">true</span>
 <span class="token number">4</span> \u2502 <span class="token boolean">true</span>
 <span class="token number">5</span> \u2502 <span class="token boolean">true</span>
 <span class="token number">6</span> \u2502 <span class="token boolean">true</span>
 <span class="token number">7</span> \u2502 <span class="token boolean">true</span>
 <span class="token number">8</span> \u2502 <span class="token boolean">true</span>
 <span class="token number">9</span> \u2502 <span class="token boolean">true</span>
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><p>and this new mask can be used to filter the dataframe</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token variable">$df</span> <span class="token operator">|</span> dataframe filter-with <span class="token variable">$mask3</span>

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502 int_1 \u2502 int_2 \u2502 float_1 \u2502 float_2 \u2502 first \u2502 second \u2502 third \u2502  word</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502     <span class="token number">4</span> \u2502    <span class="token number">14</span> \u2502  <span class="token number">0.4000</span> \u2502  <span class="token number">3.0000</span> \u2502 b     \u2502 a      \u2502 c     \u2502 second
 <span class="token number">1</span> \u2502     <span class="token number">0</span> \u2502    <span class="token number">15</span> \u2502  <span class="token number">0.5000</span> \u2502  <span class="token number">4.0000</span> \u2502 b     \u2502 a      \u2502 a     \u2502 third
 <span class="token number">2</span> \u2502     <span class="token number">6</span> \u2502    <span class="token number">16</span> \u2502  <span class="token number">0.6000</span> \u2502  <span class="token number">5.0000</span> \u2502 b     \u2502 a      \u2502 a     \u2502 second
 <span class="token number">3</span> \u2502     <span class="token number">7</span> \u2502    <span class="token number">17</span> \u2502  <span class="token number">0.7000</span> \u2502  <span class="token number">6.0000</span> \u2502 b     \u2502 c      \u2502 a     \u2502 third
 <span class="token number">4</span> \u2502     <span class="token number">8</span> \u2502    <span class="token number">18</span> \u2502  <span class="token number">0.8000</span> \u2502  <span class="token number">7.0000</span> \u2502 c     \u2502 c      \u2502 b     \u2502 eight
 <span class="token number">5</span> \u2502     <span class="token number">9</span> \u2502    <span class="token number">19</span> \u2502  <span class="token number">0.9000</span> \u2502  <span class="token number">8.0000</span> \u2502 c     \u2502 c      \u2502 b     \u2502 ninth
 <span class="token number">6</span> \u2502     <span class="token number">0</span> \u2502    <span class="token number">10</span> \u2502  <span class="token number">0.0000</span> \u2502  <span class="token number">9.0000</span> \u2502 c     \u2502 c      \u2502 b     \u2502 ninth
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><p>Another operation that can be done with masks is setting or replacing a value from a series. For example, we can change the value in the column <code>first</code> where the value is equal to <code>a</code></p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token variable">$df</span>.first <span class="token operator">|</span> dataframe <span class="token builtin class-name">set</span> new --mask <span class="token punctuation">(</span><span class="token variable">$df</span>.first <span class="token operator">=~</span> a<span class="token punctuation">)</span>

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502 string</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502 new
 <span class="token number">1</span> \u2502 new
 <span class="token number">2</span> \u2502 new
 <span class="token number">3</span> \u2502 b
 <span class="token number">4</span> \u2502 b
 <span class="token number">5</span> \u2502 b
 <span class="token number">6</span> \u2502 b
 <span class="token number">7</span> \u2502 c
 <span class="token number">8</span> \u2502 c
 <span class="token number">9</span> \u2502 c
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><h2 id="series-as-indices" tabindex="-1"><a class="header-anchor" href="#series-as-indices" aria-hidden="true">#</a> Series as indices</h2><p>Series can be also used as a way of filtering a dataframe by using them as a list of indices. For example, let&#39;s say that we want to get rows 1, 4, and 6 from our original dataframe. With that in mind, we can use the next command to extract that information</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> indices <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">4</span> <span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">|</span> dataframe to-df<span class="token punctuation">)</span>
<span class="token operator">&gt;</span> <span class="token variable">$df</span> <span class="token operator">|</span> dataframe take <span class="token variable">$indices</span>

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502 int_1 \u2502 int_2 \u2502 float_1 \u2502 float_2 \u2502 first \u2502 second \u2502 third \u2502  word</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502     <span class="token number">2</span> \u2502    <span class="token number">12</span> \u2502  <span class="token number">0.2000</span> \u2502  <span class="token number">1.0000</span> \u2502 a     \u2502 b      \u2502 c     \u2502 second
 <span class="token number">1</span> \u2502     <span class="token number">0</span> \u2502    <span class="token number">15</span> \u2502  <span class="token number">0.5000</span> \u2502  <span class="token number">4.0000</span> \u2502 b     \u2502 a      \u2502 a     \u2502 third
 <span class="token number">2</span> \u2502     <span class="token number">7</span> \u2502    <span class="token number">17</span> \u2502  <span class="token number">0.7000</span> \u2502  <span class="token number">6.0000</span> \u2502 b     \u2502 c      \u2502 a     \u2502 third
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><p>The command <code>take</code> is very handy, specially if we mix it with other commands. Let&#39;s say that we want to extract all rows for the first duplicated element for column <code>first</code>. In order to do that, we can use the command <code>dataframe arg-unique</code> as shown in the next example</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> indices <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$df</span>.first <span class="token operator">|</span> dataframe arg-unique<span class="token punctuation">)</span>
<span class="token operator">&gt;</span> <span class="token variable">$df</span> <span class="token operator">|</span> dataframe take <span class="token variable">$indices</span>

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502 int_1 \u2502 int_2 \u2502 float_1 \u2502 float_2 \u2502 first \u2502 second \u2502 third \u2502  word</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502     <span class="token number">1</span> \u2502    <span class="token number">11</span> \u2502  <span class="token number">0.1000</span> \u2502  <span class="token number">1.0000</span> \u2502 a     \u2502 b      \u2502 c     \u2502 first
 <span class="token number">1</span> \u2502     <span class="token number">4</span> \u2502    <span class="token number">14</span> \u2502  <span class="token number">0.4000</span> \u2502  <span class="token number">3.0000</span> \u2502 b     \u2502 a      \u2502 c     \u2502 second
 <span class="token number">2</span> \u2502     <span class="token number">8</span> \u2502    <span class="token number">18</span> \u2502  <span class="token number">0.8000</span> \u2502  <span class="token number">7.0000</span> \u2502 c     \u2502 c      \u2502 b     \u2502 eight
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><p>Or what if we want to create a new sorted dataframe using a column in specific. We can use the <code>dataframe arg-sort</code> to accomplish that. In the next example we can sort the dataframe by the column <code>word</code></p><blockquote><p>Note. The same result could be accomplished using the command <code>sort</code></p></blockquote><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> indices <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$df</span>.word <span class="token operator">|</span> dataframe arg-sort<span class="token punctuation">)</span>
<span class="token operator">&gt;</span> <span class="token variable">$df</span> <span class="token operator">|</span> dataframe take <span class="token variable">$indices</span>

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502 int_1 \u2502 int_2 \u2502 float_1 \u2502 float_2 \u2502 first \u2502 second \u2502 third \u2502  word</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502     <span class="token number">8</span> \u2502    <span class="token number">18</span> \u2502  <span class="token number">0.8000</span> \u2502  <span class="token number">7.0000</span> \u2502 c     \u2502 c      \u2502 b     \u2502 eight
 <span class="token number">1</span> \u2502     <span class="token number">1</span> \u2502    <span class="token number">11</span> \u2502  <span class="token number">0.1000</span> \u2502  <span class="token number">1.0000</span> \u2502 a     \u2502 b      \u2502 c     \u2502 first
 <span class="token number">2</span> \u2502     <span class="token number">9</span> \u2502    <span class="token number">19</span> \u2502  <span class="token number">0.9000</span> \u2502  <span class="token number">8.0000</span> \u2502 c     \u2502 c      \u2502 b     \u2502 ninth
 <span class="token number">3</span> \u2502     <span class="token number">0</span> \u2502    <span class="token number">10</span> \u2502  <span class="token number">0.0000</span> \u2502  <span class="token number">9.0000</span> \u2502 c     \u2502 c      \u2502 b     \u2502 ninth
 <span class="token number">4</span> \u2502     <span class="token number">2</span> \u2502    <span class="token number">12</span> \u2502  <span class="token number">0.2000</span> \u2502  <span class="token number">1.0000</span> \u2502 a     \u2502 b      \u2502 c     \u2502 second
 <span class="token number">5</span> \u2502     <span class="token number">4</span> \u2502    <span class="token number">14</span> \u2502  <span class="token number">0.4000</span> \u2502  <span class="token number">3.0000</span> \u2502 b     \u2502 a      \u2502 c     \u2502 second
 <span class="token number">6</span> \u2502     <span class="token number">6</span> \u2502    <span class="token number">16</span> \u2502  <span class="token number">0.6000</span> \u2502  <span class="token number">5.0000</span> \u2502 b     \u2502 a      \u2502 a     \u2502 second
 <span class="token number">7</span> \u2502     <span class="token number">3</span> \u2502    <span class="token number">13</span> \u2502  <span class="token number">0.3000</span> \u2502  <span class="token number">2.0000</span> \u2502 a     \u2502 b      \u2502 c     \u2502 third
 <span class="token number">8</span> \u2502     <span class="token number">0</span> \u2502    <span class="token number">15</span> \u2502  <span class="token number">0.5000</span> \u2502  <span class="token number">4.0000</span> \u2502 b     \u2502 a      \u2502 a     \u2502 third
 <span class="token number">9</span> \u2502     <span class="token number">7</span> \u2502    <span class="token number">17</span> \u2502  <span class="token number">0.7000</span> \u2502  <span class="token number">6.0000</span> \u2502 b     \u2502 c      \u2502 a     \u2502 third
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><p>And finally, we can create new Series by setting a new value in the marked indices. Have a look at the next command</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> indices <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">|</span> dataframe to-df<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&gt;</span> <span class="token variable">$df</span>.int_1 <span class="token operator">|</span> dataframe set-with-idx <span class="token number">123</span> --indices <span class="token variable">$indices</span>

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502 int_1</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502   <span class="token number">123</span>
 <span class="token number">1</span> \u2502     <span class="token number">2</span>
 <span class="token number">2</span> \u2502   <span class="token number">123</span>
 <span class="token number">3</span> \u2502     <span class="token number">4</span>
 <span class="token number">4</span> \u2502     <span class="token number">0</span>
 <span class="token number">5</span> \u2502     <span class="token number">6</span>
 <span class="token number">6</span> \u2502     <span class="token number">7</span>
 <span class="token number">7</span> \u2502     <span class="token number">8</span>
 <span class="token number">8</span> \u2502     <span class="token number">9</span>
 <span class="token number">9</span> \u2502     <span class="token number">0</span>
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><h2 id="unique-values" tabindex="-1"><a class="header-anchor" href="#unique-values" aria-hidden="true">#</a> Unique values</h2><p>Another operation that can be done with <code>Series</code> is to search for unique values in a list or column. Lets use again the first dataframe we created to test these operations.</p><p>The first and most common operation that we have is <code>value_counts</code>. This command calculates a count of the unique values that exist in a Series. For example, we can use it to count how many occurrences we have in the column <code>first</code></p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token variable">$df</span>.first <span class="token operator">|</span> dataframe value-counts

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502 first \u2502 counts</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502 b     \u2502      <span class="token number">4</span>
 <span class="token number">1</span> \u2502 c     \u2502      <span class="token number">3</span>
 <span class="token number">2</span> \u2502 a     \u2502      <span class="token number">3</span>
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><p>As expected, the command returns a new dataframe that can be used to do more queries.</p><p>Continuing with our exploration of <code>Series</code>, the next thing that we can do is to only get the unique unique values from a series, like this</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token variable">$df</span>.first <span class="token operator">|</span> dataframe unique

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502 first</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502 c
 <span class="token number">1</span> \u2502 b
 <span class="token number">2</span> \u2502 a
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><p>Or we can get a mask that we can use to filter out the rows where data is unique or duplicated. For example, we can select the rows for unique values in column <code>word</code></p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token variable">$df</span> <span class="token operator">|</span> dataframe filter-with <span class="token punctuation">(</span><span class="token variable">$df</span>.word <span class="token operator">|</span> dataframe is-unique<span class="token punctuation">)</span>

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502 int_1 \u2502 int_2 \u2502 float_1 \u2502 float_2 \u2502 first \u2502 second \u2502 third \u2502 word</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502     <span class="token number">1</span> \u2502    <span class="token number">11</span> \u2502  <span class="token number">0.1000</span> \u2502  <span class="token number">1.0000</span> \u2502 a     \u2502 b      \u2502 c     \u2502 first
 <span class="token number">1</span> \u2502     <span class="token number">8</span> \u2502    <span class="token number">18</span> \u2502  <span class="token number">0.8000</span> \u2502  <span class="token number">7.0000</span> \u2502 c     \u2502 c      \u2502 b     \u2502 eight
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><p>Or all the duplicated ones</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token variable">$df</span> <span class="token operator">|</span> dataframe filter-with <span class="token punctuation">(</span><span class="token variable">$df</span>.word <span class="token operator">|</span> dataframe is-duplicated<span class="token punctuation">)</span>

\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token comment"># \u2502 int_1 \u2502 int_2 \u2502 float_1 \u2502 float_2 \u2502 first \u2502 second \u2502 third \u2502  word</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502     <span class="token number">2</span> \u2502    <span class="token number">12</span> \u2502  <span class="token number">0.2000</span> \u2502  <span class="token number">1.0000</span> \u2502 a     \u2502 b      \u2502 c     \u2502 second
 <span class="token number">1</span> \u2502     <span class="token number">3</span> \u2502    <span class="token number">13</span> \u2502  <span class="token number">0.3000</span> \u2502  <span class="token number">2.0000</span> \u2502 a     \u2502 b      \u2502 c     \u2502 third
 <span class="token number">2</span> \u2502     <span class="token number">4</span> \u2502    <span class="token number">14</span> \u2502  <span class="token number">0.4000</span> \u2502  <span class="token number">3.0000</span> \u2502 b     \u2502 a      \u2502 c     \u2502 second
 <span class="token number">3</span> \u2502     <span class="token number">0</span> \u2502    <span class="token number">15</span> \u2502  <span class="token number">0.5000</span> \u2502  <span class="token number">4.0000</span> \u2502 b     \u2502 a      \u2502 a     \u2502 third
 <span class="token number">4</span> \u2502     <span class="token number">6</span> \u2502    <span class="token number">16</span> \u2502  <span class="token number">0.6000</span> \u2502  <span class="token number">5.0000</span> \u2502 b     \u2502 a      \u2502 a     \u2502 second
 <span class="token number">5</span> \u2502     <span class="token number">7</span> \u2502    <span class="token number">17</span> \u2502  <span class="token number">0.7000</span> \u2502  <span class="token number">6.0000</span> \u2502 b     \u2502 c      \u2502 a     \u2502 third
 <span class="token number">6</span> \u2502     <span class="token number">9</span> \u2502    <span class="token number">19</span> \u2502  <span class="token number">0.9000</span> \u2502  <span class="token number">8.0000</span> \u2502 c     \u2502 c      \u2502 b     \u2502 ninth
 <span class="token number">7</span> \u2502     <span class="token number">0</span> \u2502    <span class="token number">10</span> \u2502  <span class="token number">0.0000</span> \u2502  <span class="token number">9.0000</span> \u2502 c     \u2502 c      \u2502 b     \u2502 ninth
\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
</code></pre></div><h2 id="dataframes-commands" tabindex="-1"><a class="header-anchor" href="#dataframes-commands" aria-hidden="true">#</a> Dataframes commands</h2><p>So far we have seen quite a few operations that can be done using <code>DataFrame</code>s commands. However, the commands we have used so far, are not all the commands available to work with data and be assured that there will be more as the feature becomes more stable.</p><p>The next list show the available dataframe commands with their description, and whenever possible, their analogous nushell command.</p><p>| Command Name | Applies To | Description | Nushell Equivalent | | --------------- | --------------------------- | -------------------------------------------------------------------------- | ----------------------------- | ------------------------------------- | | aggregate | DataFrame, GroupBy, Series | Performs an aggregation operation on a dataframe, groupby or series object | math | | all-false | Series | Returns true if all values are false | | | all-true | Series | Returns true if all values are true | all? | | arg-max | Series | Return index for max value in series | | | arg-min | Series | Return index for min value in series | | | arg-sort | Series | Returns indexes for a sorted series | | | arg-true | Series | Returns indexes where values are true | | | arg-unique | Series | Returns indexes for unique values | | | column | DataFrame | Returns the selected column as Series | get | | count-null | Series | Counts null values | | | count-unique | Series | Counts unique value | | | drop | DataFrame | Creates a new dataframe by dropping the selected columns | drop | | drop-duplicates | DataFrame | Drops duplicate values in dataframe | | | drop-nulls | DataFrame, Series | Drops null values in dataframe | | | dtypes | DataFrame | Show dataframe data types | | | filter-with | DataFrame | Filters dataframe using a mask as reference | | | first | DataFrame | Creates new dataframe with first rows | first | | get | DataFrame | Creates dataframe with the selected columns | get | | group-by | DataFrame | Creates a groupby object that can be used for other aggregations | group-by | | is-duplicated | Series | Creates mask indicating duplicated values | | | is-in | Series | Checks if elements from a series are contained in right series | in | | is-not-null | Series | Creates mask where value is not null | | | is-null | Series | Creates mask where value is null | <code>&lt;column_name&gt; == $nothing</code> | | is-unique | Series | Creates mask indicating unique values | | | join | DataFrame | Joins a dataframe using columns as reference | | | last | DataFrame | Creates new dataframe with last rows | last | | list | | Lists stored dataframes | | | melt | DataFrame | Unpivot a DataFrame from wide to long format | | | not | Series Inverts boolean mask | | | open | | Loads dataframe form csv file | open | | pivot | GroupBy | Performs a pivot operation on a groupby object | pivot | | rename | Series | Renames a series | rename | | sample | DataFrame | Create sample dataframe | | | select | DataFrame | Creates a new dataframe with the selected columns | select | | set | Series | Sets value where given mask is true | | | set-with-idx | Series | Sets value in the given index | | | shift | Series | Shifts the values by a given period | | | show | DataFrame | Converts a section of the dataframe to a Table or List value | | | slice | DataFrame | Creates new dataframe from a slice of rows | | | sort | DataFrame, Series | Creates new sorted dataframe or series | sort | | take | DataFrame, Series | Creates new dataframe using the given indices | | | to-csv | DataFrame | Saves dataframe to csv file | to csv | | to-df | | Converts a pipelined Table or List into Dataframe | | | to-dummies | DataFrame | Creates a new dataframe with dummy variables | | | to-parquet | DataFrame | Saves dataframe to parquet file | | | unique | Series | Returns unique values from a series | uniq | | value-counts | Series | Returns a dataframe with the counts for unique values in series | | | where | DataFrame | Filter dataframe to match the condition | where | | with-column | DataFrame | Adds a series to the dataframe | <code>insert &lt;column_name&gt; &lt;value&gt; | update &lt;column_name&gt; { &lt;new_value&gt; }</code> |</p><h2 id="future-of-dataframes" tabindex="-1"><a class="header-anchor" href="#future-of-dataframes" aria-hidden="true">#</a> Future of Dataframes</h2><p>We hope that by the end of this page you have a solid grasp of how to use the dataframe commands. As you can see they offer powerful operations that can help you process data faster and natively.</p><p>However, the future of these dataframes is still very experimental. New commands and tools that take advantage of these commands will be added as they mature. For example, the next step for dataframes is the introduction of Lazy Dataframes. These will allow you to define complex data operations that will be executed until you decide to &quot;finish&quot; the pipe. This will give nushell the chance to select the optimal plan to query the data you would be asking for.</p><p>Keep visiting this book in order to check the new things happening to dataframes and how they can help you process data faster and efficiently.</p>`,67);function ea(ta,oa){const s=p("ExternalLinkIcon");return c(),l("div",null,[u,i,m,a("p",null,[k,d,b,h,f,a("a",g,[v,e(s)]),w,a("a",_,[y,e(s)]),x,a("a",$,[D,e(s)]),S]),q,F,a("p",null,[A,a("a",T,[N,e(s)]),C,L,j]),I,W,a("p",null,[B,a("a",O,[R,e(s)]),G]),Y,a("p",null,[z,P,H,U,V,a("a",E,[Z,e(s)]),J,M,K,Q,X,aa,na]),sa])}var ca=o(r,[["render",ea],["__file","dataframes.html.vue"]]);export{ca as default};
