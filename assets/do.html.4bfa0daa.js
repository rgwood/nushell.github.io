import{_ as t,z as o,A as r,X as a,C as s,D as n,a6 as c}from"./framework.3d018c9f.js";const p={},l={id:"frontmatter-title-for-core",tabindex:"-1"},i=a("a",{class:"header-anchor",href:"#frontmatter-title-for-core","aria-hidden":"true"},"#",-1),d={class:"command-title"},h=c(`<h2 id="signature" tabindex="-1"><a class="header-anchor" href="#signature" aria-hidden="true">#</a> Signature</h2><p><code>&gt; do (block) ...rest --ignore-errors --capture-errors</code></p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h2><ul><li><code>block</code>: the block to run</li><li><code>...rest</code>: the parameter(s) for the block</li><li><code>--ignore-errors</code>: ignore shell errors as the block runs</li><li><code>--capture-errors</code>: capture errors as the block runs and return it</li></ul><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Run the block</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token keyword">do</span> <span class="token punctuation">{</span> <span class="token builtin class-name">echo</span> hello <span class="token punctuation">}</span>
</code></pre></div><p>Run the block and ignore shell errors</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token keyword">do</span> <span class="token parameter variable">-i</span> <span class="token punctuation">{</span> thisisnotarealcommand <span class="token punctuation">}</span>
</code></pre></div><p>Abort the pipeline if a program returns a non-zero exit code</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token keyword">do</span> <span class="token parameter variable">-c</span> <span class="token punctuation">{</span> nu <span class="token parameter variable">-c</span> <span class="token string">&#39;exit 1&#39;</span> <span class="token punctuation">}</span> <span class="token operator">|</span> myscarycommand
</code></pre></div><p>Run the block, with a positional parameter</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token keyword">do</span> <span class="token punctuation">{</span><span class="token operator">|</span>x<span class="token operator">|</span> <span class="token number">100</span> + <span class="token variable">$x</span> <span class="token punctuation">}</span> <span class="token number">50</span>
</code></pre></div>`,13);function u(e,k){return o(),r("div",null,[a("h1",l,[i,s(),a("code",null,n(e.$frontmatter.title),1),s(" for core")]),a("div",d,n(e.$frontmatter.core),1),h])}const g=t(p,[["render",u],["__file","do.html.vue"]]);export{g as default};
