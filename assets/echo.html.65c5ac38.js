import{_ as n,o as r,c as o,a as e,t as s,d as t,e as i}from"./app.b798d81c.js";const c={},l={id:"frontmatter-title-for-core",tabindex:"-1"},h=e("a",{class:"header-anchor",href:"#frontmatter-title-for-core","aria-hidden":"true"},"#",-1),d=t(),p=t(" for core"),u={class:"command-title"},m=i(`<h2 id="signature" tabindex="-1"><a class="header-anchor" href="#signature" aria-hidden="true">#</a> Signature</h2><p><code>&gt; echo ...rest</code></p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h2><ul><li><code>...rest</code>: the values to echo</li></ul><h2 id="notes" tabindex="-1"><a class="header-anchor" href="#notes" aria-hidden="true">#</a> Notes</h2><div class="language-text ext-text"><pre class="language-text"><code>When given no arguments, it returns an empty string. When given one argument,
it returns it. Otherwise, it returns a list of the arguments. There is usually
little reason to use this over just writing the values as-is.
</code></pre></div><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Put a list of numbers in the pipeline. This is the same as [1 2 3].</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">echo</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span>
</code></pre></div><p>Returns the piped-in value, by using the special $in variable to obtain it.</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">echo</span> <span class="token variable">$in</span>
</code></pre></div>`,11);function g(a,_){return r(),o("div",null,[e("h1",l,[h,d,e("code",null,s(a.$frontmatter.title),1),p]),e("div",u,s(a.$frontmatter.core),1),m])}const b=n(c,[["render",g],["__file","echo.html.vue"]]);export{b as default};
