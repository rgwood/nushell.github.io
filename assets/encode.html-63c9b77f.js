import{_ as t,p as o,q as r,Q as n,t as a,v as e,a1 as p}from"./framework-344bb0e4.js";const c={},i={id:"frontmatter-title-for-strings",tabindex:"-1"},l=n("a",{class:"header-anchor",href:"#frontmatter-title-for-strings","aria-hidden":"true"},"#",-1),d={class:"command-title"},u=p(`<h2 id="signature" tabindex="-1"><a class="header-anchor" href="#signature" aria-hidden="true">#</a> Signature</h2><p><code>&gt; encode (encoding) --ignore-errors</code></p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h2><ul><li><code>encoding</code>: the text encoding to use</li><li><code>--ignore-errors</code> <code>(-i)</code>: when a character isn&#39;t in the given encoding, replace with a HTML entity (like <code>&amp;#127880;</code>)</li></ul><h2 id="notes" tabindex="-1"><a class="header-anchor" href="#notes" aria-hidden="true">#</a> Notes</h2><p>Multiple encodings are supported; here are a few: big5, euc-jp, euc-kr, gbk, iso-8859-1, cp1252, latin5</p><p>Note that since the Encoding Standard doesn&#39;t specify encoders for utf-16le and utf-16be, these are not yet supported.</p><p>For a more complete list of encodings, please refer to the encoding_rs documentation link at https://docs.rs/encoding_rs/latest/encoding_rs/#statics</p><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Encode an UTF-8 string into Shift-JIS</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token string">&quot;Ë≤†„Åë„Çã„Å®Áü•„Å£„Å¶Êà¶„ÅÜ„ÅÆ„Åå„ÄÅÈÅ•„Åã„Å´Áæé„Åó„ÅÑ„ÅÆ„Å†&quot;</span> <span class="token operator">|</span> encode shift-jis
Length: <span class="token number">40</span> <span class="token punctuation">(</span>0x28<span class="token punctuation">)</span> bytes <span class="token operator">|</span> printable whitespace ascii_other non_ascii
00000000:   <span class="token number">95</span> <span class="token number">89</span> <span class="token number">82</span> af  <span class="token number">82</span> e9 <span class="token number">82</span> c6  <span class="token number">92</span> 6d <span class="token number">82</span> c1  <span class="token number">82</span> c4 <span class="token number">90</span> ed   √ó√ó√ó√ó√ó√ó√ó√ó√óm√ó√ó√ó√ó√ó√ó
00000010:   <span class="token number">82</span> a4 <span class="token number">82</span> cc  <span class="token number">82</span> aa <span class="token number">81</span> <span class="token number">41</span>  <span class="token number">97</span> <span class="token number">79</span> <span class="token number">82</span> a9  <span class="token number">82</span> c9 <span class="token number">94</span> fc   √ó√ó√ó√ó√ó√ó√óA√óy√ó√ó√ó√ó√ó√ó
00000020:   <span class="token number">82</span> b5 <span class="token number">82</span> a2  <span class="token number">82</span> cc <span class="token number">82</span> be                             √ó√ó√ó√ó√ó√ó√ó√ó

</code></pre></div><p>Replace characters with HTML entities if they can&#39;t be encoded</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token string">&quot;üéà&quot;</span> <span class="token operator">|</span> encode <span class="token parameter variable">-i</span> shift-jis
Length: <span class="token number">9</span> <span class="token punctuation">(</span>0x9<span class="token punctuation">)</span> bytes <span class="token operator">|</span> printable whitespace ascii_other non_ascii
00000000:   <span class="token number">26</span> <span class="token number">23</span> <span class="token number">31</span> <span class="token number">32</span>  <span class="token number">37</span> <span class="token number">38</span> <span class="token number">38</span> <span class="token number">30</span>  3b                         <span class="token operator">&amp;</span><span class="token comment">#127880;</span>

</code></pre></div>`,13);function h(s,m){return o(),r("div",null,[n("h1",i,[l,a(),n("code",null,e(s.$frontmatter.title),1),a(" for strings")]),n("div",d,e(s.$frontmatter.strings),1),u])}const k=t(c,[["render",h],["__file","encode.html.vue"]]);export{k as default};
