import{_ as t,r as l,o as c,c as m,a as o,b as e,w as a,d as n,e as d}from"./app.43db386a.js";const r={},i=o("p",null,[n("Converts content (string or binary) into a table. The source format is specified as a subcommand, like "),o("code",null,"from csv"),n(" or "),o("code",null,"from json"),n(".")],-1),p=o("p",null,"Use this when nushell cannot determine the input file extension.",-1),u=o("h2",{id:"available-subcommands",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#available-subcommands","aria-hidden":"true"},"#"),n(" Available Subcommands")],-1),_=o("li",null,"from bson",-1),f=n("from csv"),h=o("li",null,"from eml",-1),b=n("from ics"),k=n("from ini"),v=n("from json"),x=n("from ods"),g=o("li",null,"from sqlite",-1),w=o("li",null,"from ssv",-1),y=n("from toml"),L=n("from tsv"),T=n("from url"),A=n("from vcf"),N=n("from xlsx"),V=n("from xml"),j=n("from yaml"),B=d(`<p><em>Subcommands without links are currently missing their documentation.</em></p><h2 id="example-for-from-csv" tabindex="-1"><a class="header-anchor" href="#example-for-from-csv" aria-hidden="true">#</a> Example for <code>from csv</code></h2><p>Let&#39;s say we have the following file:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">cat</span> pets.txt
animal, name, age
cat, Tom, <span class="token number">7</span>
dog, Alfred, <span class="token number">10</span>
chameleon, Linda, <span class="token number">1</span>
</code></pre></div><p><code>pets.txt</code> is actually a .csv file but it has the .txt extension, <code>open</code> is not able to convert it into a table:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">open</span> pets.txt
animal, name, age
cat, Tom, <span class="token number">7</span>
dog, Alfred, <span class="token number">10</span>
chameleon, Linda, <span class="token number">1</span>
</code></pre></div><p>To get a table from <code>pets.txt</code> we need to use the <code>from csv</code> command:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">open</span> pets.txt <span class="token operator">|</span> from csv
\u2501\u2501\u2501\u252F\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u252F\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u252F\u2501\u2501\u2501\u2501\u2501\u2501
 <span class="token comment"># \u2502 animal    \u2502  name   \u2502  age</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502 <span class="token function">cat</span>       \u2502  Tom    \u2502  <span class="token number">7</span>
 <span class="token number">1</span> \u2502 dog       \u2502  Alfred \u2502  <span class="token number">10</span>
 <span class="token number">2</span> \u2502 chameleon \u2502  Linda  \u2502  <span class="token number">1</span>
\u2501\u2501\u2501\u2537\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2537\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2537\u2501\u2501\u2501\u2501\u2501\u2501
</code></pre></div>`,8);function C(S,E){const s=l("RouterLink");return c(),m("div",null,[i,p,u,o("ul",null,[_,o("li",null,[e(s,{to:"/old_book/commands/from-csv.html"},{default:a(()=>[f]),_:1})]),h,o("li",null,[e(s,{to:"/old_book/commands/from-ics.html"},{default:a(()=>[b]),_:1})]),o("li",null,[e(s,{to:"/old_book/commands/from-ini.html"},{default:a(()=>[k]),_:1})]),o("li",null,[e(s,{to:"/old_book/commands/from-json.html"},{default:a(()=>[v]),_:1})]),o("li",null,[e(s,{to:"/old_book/commands/from-ods.html"},{default:a(()=>[x]),_:1})]),g,w,o("li",null,[e(s,{to:"/old_book/commands/from-toml.html"},{default:a(()=>[y]),_:1})]),o("li",null,[e(s,{to:"/old_book/commands/from-tsv.html"},{default:a(()=>[L]),_:1})]),o("li",null,[e(s,{to:"/old_book/commands/from-url.html"},{default:a(()=>[T]),_:1})]),o("li",null,[e(s,{to:"/old_book/commands/from-vcf.html"},{default:a(()=>[A]),_:1})]),o("li",null,[e(s,{to:"/old_book/commands/from-xlsx.html"},{default:a(()=>[N]),_:1})]),o("li",null,[e(s,{to:"/old_book/commands/from-xml.html"},{default:a(()=>[V]),_:1})]),o("li",null,[e(s,{to:"/old_book/commands/from-yaml.html"},{default:a(()=>[j]),_:1})])]),B])}var q=t(r,[["render",C],["__file","from.html.vue"]]);export{q as default};
