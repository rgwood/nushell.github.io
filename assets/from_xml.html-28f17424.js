import{_ as s,p as o,q as r,Q as t,t as n,v as a,a1 as l}from"./framework-344bb0e4.js";const i={},c={id:"frontmatter-title-for-formats",tabindex:"-1"},d=t("a",{class:"header-anchor",href:"#frontmatter-title-for-formats","aria-hidden":"true"},"#",-1),p={class:"command-title"},m=l(`<h2 id="signature" tabindex="-1"><a class="header-anchor" href="#signature" aria-hidden="true">#</a> Signature</h2><p><code>&gt; from xml --keep-comments --keep-pi</code></p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h2><ul><li><code>--keep-comments</code> <code>(-)</code>: add comment nodes to result</li><li><code>--keep-pi</code> <code>(-)</code>: add processing instruction nodes to result</li></ul><h2 id="notes" tabindex="-1"><a class="header-anchor" href="#notes" aria-hidden="true">#</a> Notes</h2><p>Every XML entry is represented via a record with tag, attribute and content fields. To represent different types of entries different values are written to this fields:</p><ol><li>Tag entry: <code>{tag: &lt;tag name&gt; attrs: {&lt;attr name&gt;: &quot;&lt;string value&gt;&quot; ...} content: [&lt;entries&gt;]}</code></li><li>Comment entry: <code>{tag: &#39;!&#39; attrs: null content: &quot;&lt;comment string&gt;&quot;}</code></li><li>Processing instruction (PI): <code>{tag: &#39;?&lt;pi name&gt;&#39; attrs: null content: &quot;&lt;pi content string&gt;&quot;}</code></li><li>Text: <code>{tag: null attrs: null content: &quot;&lt;text&gt;&quot;}</code>.</li></ol><p>Unlike to xml command all null values are always present and text is never represented via plain string. This way content of every tag is always a table and is easier to parse</p><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Converts xml formatted string to record</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token string">&#39;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;note&gt;
  &lt;remember&gt;Event&lt;/remember&gt;
&lt;/note&gt;&#39;</span> <span class="token operator">|</span> from xml
╭────────────┬───────────────────────────────────────────────────────────────────────────╮
│ tag        │ note                                                                      │
│ attributes │ <span class="token punctuation">{</span>record <span class="token number">0</span> fields<span class="token punctuation">}</span>                                                         │
│            │ ╭───┬──────────┬───────────────────┬────────────────────────────────────╮ │
│ content    │ │ <span class="token comment"># │   tag    │    attributes     │              content               │ │</span>
│            │ ├───┼──────────┼───────────────────┼────────────────────────────────────┤ │
│            │ │ <span class="token number">0</span> │ remember │ <span class="token punctuation">{</span>record <span class="token number">0</span> fields<span class="token punctuation">}</span> │ ╭───┬─────┬────────────┬─────────╮ │ │
│            │ │   │          │                   │ │ <span class="token comment"># │ tag │ attributes │ content │ │ │</span>
│            │ │   │          │                   │ ├───┼─────┼────────────┼─────────┤ │ │
│            │ │   │          │                   │ │ <span class="token number">0</span> │     │            │ Event   │ │ │
│            │ │   │          │                   │ ╰───┴─────┴────────────┴─────────╯ │ │
│            │ ╰───┴──────────┴───────────────────┴────────────────────────────────────╯ │
╰────────────┴───────────────────────────────────────────────────────────────────────────╯
</code></pre></div>`,11);function u(e,g){return o(),r("div",null,[t("h1",c,[d,n(),t("code",null,a(e.$frontmatter.title),1),n(" for formats")]),t("div",p,a(e.$frontmatter.formats),1),m])}const f=s(i,[["render",u],["__file","from_xml.html.vue"]]);export{f as default};
