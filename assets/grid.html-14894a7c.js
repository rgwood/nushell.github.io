import{_ as t,p as o,q as p,Q as a,t as n,v as e,a1 as r}from"./framework-344bb0e4.js";const c={},l={id:"frontmatter-title-for-viewers",tabindex:"-1"},i=a("a",{class:"header-anchor",href:"#frontmatter-title-for-viewers","aria-hidden":"true"},"#",-1),u={class:"command-title"},d=r(`<h2 id="signature" tabindex="-1"><a class="header-anchor" href="#signature" aria-hidden="true">#</a> Signature</h2><p><code>&gt; grid --width --color --separator</code></p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h2><ul><li><code>--width {int}</code>: number of terminal columns wide (not output columns)</li><li><code>--color</code> <code>(-c)</code>: draw output with color</li><li><code>--separator {string}</code>: character to separate grid with</li></ul><h2 id="notes" tabindex="-1"><a class="header-anchor" href="#notes" aria-hidden="true">#</a> Notes</h2><p>grid was built to give a concise gridded layout for ls. however, it determines what to put in the grid by looking for a column named &#39;name&#39;. this works great for tables and records but for lists we need to do something different. such as with &#39;[one two three] | grid&#39; it creates a fake column called &#39;name&#39; for these values so that it prints out the list properly.</p><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Render a simple list to a grid</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> a b c<span class="token punctuation">]</span> <span class="token operator">|</span> grid
<span class="token number">1</span> │ <span class="token number">2</span> │ <span class="token number">3</span> │ a │ b │ c

</code></pre></div><p>The above example is the same as:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> a b c<span class="token punctuation">]</span> <span class="token operator">|</span> wrap name <span class="token operator">|</span> grid
<span class="token number">1</span> │ <span class="token number">2</span> │ <span class="token number">3</span> │ a │ b │ c

</code></pre></div><p>Render a record to a grid</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">{</span>name: <span class="token string">&#39;foo&#39;</span>, b: <span class="token number">1</span>, c: <span class="token number">2</span><span class="token punctuation">}</span> <span class="token operator">|</span> grid
foo

</code></pre></div><p>Render a list of records to a grid</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>name: <span class="token string">&#39;A&#39;</span>, v: <span class="token number">1</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>name: <span class="token string">&#39;B&#39;</span>, v: <span class="token number">2</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>name: <span class="token string">&#39;C&#39;</span>, v: <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">|</span> grid
A │ B │ C

</code></pre></div><p>Render a table with &#39;name&#39; column in it to a grid</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>name patch<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">[</span><span class="token string">&#39;0.1.0&#39;</span> false<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token string">&#39;0.1.1&#39;</span> true<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token string">&#39;0.2.0&#39;</span> false<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">|</span> grid
<span class="token number">0.1</span>.0 │ <span class="token number">0.1</span>.1 │ <span class="token number">0.2</span>.0

</code></pre></div>`,17);function h(s,k){return o(),p("div",null,[a("h1",l,[i,n(),a("code",null,e(s.$frontmatter.title),1),n(" for viewers")]),a("div",u,e(s.$frontmatter.viewers),1),d])}const g=t(c,[["render",h],["__file","grid.html.vue"]]);export{g as default};
