import{_ as o,p as n,q as r,Q as e,t,v as s,a1 as c}from"./framework-344bb0e4.js";const d={},p={id:"frontmatter-title-for-network",tabindex:"-1"},l=e("a",{class:"header-anchor",href:"#frontmatter-title-for-network","aria-hidden":"true"},"#",-1),i={class:"command-title"},h=c(`<h2 id="signature" tabindex="-1"><a class="header-anchor" href="#signature" aria-hidden="true">#</a> Signature</h2><p><code>&gt; http put (URL) (data) --user --password --content-type --max-time --headers --raw --insecure --full --allow-errors</code></p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h2><ul><li><code>URL</code>: the URL to post to</li><li><code>data</code>: the contents of the post body</li><li><code>--user {any}</code>: the username when authenticating</li><li><code>--password {any}</code>: the password when authenticating</li><li><code>--content-type {any}</code>: the MIME type of content to post</li><li><code>--max-time {int}</code>: timeout period in seconds</li><li><code>--headers {any}</code>: custom headers you want to add</li><li><code>--raw</code> <code>(-r)</code>: return values as a string instead of a table</li><li><code>--insecure</code> <code>(-k)</code>: allow insecure server connections when using SSL</li><li><code>--full</code> <code>(-f)</code>: returns the full response instead of only the body</li><li><code>--allow-errors</code> <code>(-e)</code>: do not fail if the server returns an error code</li></ul><h2 id="notes" tabindex="-1"><a class="header-anchor" href="#notes" aria-hidden="true">#</a> Notes</h2><p>Performs HTTP PUT operation.</p><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Put content to example.com</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> http put https://www.example.com <span class="token string">&#39;body&#39;</span>

</code></pre></div><p>Put content to example.com, with username and password</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> http put <span class="token parameter variable">-u</span> myuser <span class="token parameter variable">-p</span> mypass https://www.example.com <span class="token string">&#39;body&#39;</span>

</code></pre></div><p>Put content to example.com, with custom header</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> http put <span class="token parameter variable">-H</span> <span class="token punctuation">[</span>my-header-key my-header-value<span class="token punctuation">]</span> https://www.example.com

</code></pre></div><p>Put content to example.com, with JSON body</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> http put <span class="token parameter variable">-t</span> application/json https://www.example.com <span class="token punctuation">{</span> field: value <span class="token punctuation">}</span>

</code></pre></div>`,15);function u(a,m){return n(),r("div",null,[e("h1",p,[l,t(),e("code",null,s(a.$frontmatter.title),1),t(" for network")]),e("div",i,s(a.$frontmatter.network),1),h])}const f=o(d,[["render",u],["__file","http_put.html.vue"]]);export{f as default};
