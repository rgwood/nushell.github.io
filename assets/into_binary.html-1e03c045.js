import{_ as t,p,q as o,Q as a,t as s,v as e,a1 as r}from"./framework-344bb0e4.js";const c={},l={id:"frontmatter-title-for-conversions",tabindex:"-1"},i=a("a",{class:"header-anchor",href:"#frontmatter-title-for-conversions","aria-hidden":"true"},"#",-1),u={class:"command-title"},b=r(`<h2 id="signature" tabindex="-1"><a class="header-anchor" href="#signature" aria-hidden="true">#</a> Signature</h2><p><code>&gt; into binary ...rest</code></p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h2><ul><li><code>...rest</code>: for a data structure input, convert data at the given cell paths</li></ul><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>convert string to a nushell binary primitive</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token string">&#39;This is a string that is exactly 52 characters long.&#39;</span> <span class="token operator">|</span> into binary
Length: <span class="token number">52</span> <span class="token punctuation">(</span>0x34<span class="token punctuation">)</span> bytes <span class="token operator">|</span> printable whitespace ascii_other non_ascii
00000000:   <span class="token number">54</span> <span class="token number">68</span> <span class="token number">69</span> <span class="token number">73</span>  <span class="token number">20</span> <span class="token number">69</span> <span class="token number">73</span> <span class="token number">20</span>  <span class="token number">61</span> <span class="token number">20</span> <span class="token number">73</span> <span class="token number">74</span>  <span class="token number">72</span> <span class="token number">69</span> 6e <span class="token number">67</span>   This is a string
00000010:   <span class="token number">20</span> <span class="token number">74</span> <span class="token number">68</span> <span class="token number">61</span>  <span class="token number">74</span> <span class="token number">20</span> <span class="token number">69</span> <span class="token number">73</span>  <span class="token number">20</span> <span class="token number">65</span> <span class="token number">78</span> <span class="token number">61</span>  <span class="token number">63</span> <span class="token number">74</span> 6c <span class="token number">79</span>    that is exactly
00000020:   <span class="token number">20</span> <span class="token number">35</span> <span class="token number">32</span> <span class="token number">20</span>  <span class="token number">63</span> <span class="token number">68</span> <span class="token number">61</span> <span class="token number">72</span>  <span class="token number">61</span> <span class="token number">63</span> <span class="token number">74</span> <span class="token number">65</span>  <span class="token number">72</span> <span class="token number">73</span> <span class="token number">20</span> 6c    <span class="token number">52</span> characters l
00000030:   6f 6e <span class="token number">67</span> 2e                                          ong.

</code></pre></div><p>convert a number to a nushell binary primitive</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">|</span> into binary
Length: <span class="token number">8</span> <span class="token punctuation">(</span>0x8<span class="token punctuation">)</span> bytes <span class="token operator">|</span> printable whitespace ascii_other non_ascii
00000000:   01 00 00 00  00 00 00 00                             •0000000

</code></pre></div><p>convert a boolean to a nushell binary primitive</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token boolean">true</span> <span class="token operator">|</span> into binary
Length: <span class="token number">8</span> <span class="token punctuation">(</span>0x8<span class="token punctuation">)</span> bytes <span class="token operator">|</span> printable whitespace ascii_other non_ascii
00000000:   01 00 00 00  00 00 00 00                             •0000000

</code></pre></div><p>convert a filesize to a nushell binary primitive</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">ls</span> <span class="token operator">|</span> where name <span class="token operator">==</span> LICENSE <span class="token operator">|</span> get size <span class="token operator">|</span> into binary

</code></pre></div><p>convert a filepath to a nushell binary primitive</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">ls</span> <span class="token operator">|</span> where name <span class="token operator">==</span> LICENSE <span class="token operator">|</span> get name <span class="token operator">|</span> path <span class="token function">expand</span> <span class="token operator">|</span> into binary

</code></pre></div><p>convert a decimal to a nushell binary primitive</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token number">1.234</span> <span class="token operator">|</span> into binary
Length: <span class="token number">8</span> <span class="token punctuation">(</span>0x8<span class="token punctuation">)</span> bytes <span class="token operator">|</span> printable whitespace ascii_other non_ascii
00000000:   <span class="token number">58</span> <span class="token number">39</span> b4 c8  <span class="token number">76</span> be f3 3f                             X9××v××?

</code></pre></div>`,17);function k(n,m){return p(),o("div",null,[a("h1",l,[i,s(),a("code",null,e(n.$frontmatter.title),1),s(" for conversions")]),a("div",u,e(n.$frontmatter.conversions),1),b])}const d=t(c,[["render",k],["__file","into_binary.html.vue"]]);export{d as default};
