import{_ as a,o as s,c as n,e}from"./app.43db386a.js";const t={},o=e(`<p>This command takes a string from a pipeline as input, and returns a table where each line of the input string is a row in the table. Empty lines are ignored. This command is capable of feeding other commands, such as <code>nth</code>, with its output.</p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">[</span>input-command<span class="token punctuation">]</span> <span class="token operator">|</span> lines
</code></pre></div><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Basic usage:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">printf</span> <span class="token string">&quot;Hello<span class="token entity" title="\\n">\\n</span>World!<span class="token entity" title="\\n">\\n</span>Love, nushell.&quot;</span> <span class="token operator">|</span> lines
\u2501\u2501\u2501\u252F\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501
 <span class="token comment"># \u2502 value</span>
\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 <span class="token number">0</span> \u2502 Hello
 <span class="token number">1</span> \u2502 World<span class="token operator">!</span>
 <span class="token number">2</span> \u2502 Love, nushell.
\u2501\u2501\u2501\u2537\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501
</code></pre></div><p>One useful application is piping the contents of file into <code>lines</code>. This example extracts a certain line from a given file.</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">cat</span> lines.md <span class="token operator">|</span> lines <span class="token operator">|</span> nth <span class="token number">6</span>
<span class="token comment">## Examples</span>
</code></pre></div><p>Similarly to this example, <code>lines</code> can be used to extract certain portions of or apply transformations to data returned by any program which returns a string.</p>`,9),p=[o];function l(c,i){return s(),n("div",null,p)}var d=a(t,[["render",l],["__file","lines.html.vue"]]);export{d as default};
