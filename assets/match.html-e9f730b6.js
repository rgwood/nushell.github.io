import{_ as e,p,q as o,Q as a,t as n,v as t,a1 as c}from"./framework-344bb0e4.js";const l={},r={id:"frontmatter-title-for-core",tabindex:"-1"},u=a("a",{class:"header-anchor",href:"#frontmatter-title-for-core","aria-hidden":"true"},"#",-1),i={class:"command-title"},k=c(`<h2 id="signature" tabindex="-1"><a class="header-anchor" href="#signature" aria-hidden="true">#</a> Signature</h2><p><code>&gt; match (value) (match_block)</code></p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h2><ul><li><code>value</code>: value to check</li><li><code>match_block</code>: block to run if check succeeds</li></ul><h2 id="notes" tabindex="-1"><a class="header-anchor" href="#notes" aria-hidden="true">#</a> Notes</h2><p>This command is a parser keyword. For details, check: https://www.nushell.sh/book/thinking_in_nu.html</p><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Match on a value in range</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> match <span class="token number">3</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">..</span><span class="token number">10</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">&#39;yes!&#39;</span> <span class="token punctuation">}</span>
yes<span class="token operator">!</span>
</code></pre></div><p>Match on a field in a record</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> match <span class="token punctuation">{</span>a: <span class="token number">100</span><span class="token punctuation">}</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span>a: <span class="token variable">$my_value</span><span class="token punctuation">}</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> <span class="token variable">$my_value</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token number">100</span>
</code></pre></div><p>Match with a catch-all</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> match <span class="token number">3</span> <span class="token punctuation">{</span> <span class="token number">1</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> <span class="token string">&#39;yes!&#39;</span> <span class="token punctuation">}</span>, _ <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> <span class="token string">&#39;no!&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
no<span class="token operator">!</span>
</code></pre></div><p>Match against a list</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> match <span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token variable">$a</span>, <span class="token variable">$b</span>, <span class="token variable">$c</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> <span class="token variable">$a</span> + <span class="token variable">$b</span> + <span class="token variable">$c</span> <span class="token punctuation">}</span>, _ <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">}</span>
<span class="token number">6</span>
</code></pre></div><p>Match against pipeline input</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">{</span>a: <span class="token punctuation">{</span>b: <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">|</span> match <span class="token variable">$in</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>a: <span class="token punctuation">{</span> <span class="token variable">$b</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token variable">$b</span> + <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token number">13</span>
</code></pre></div>`,17);function h(s,d){return p(),o("div",null,[a("h1",r,[u,n(),a("code",null,t(s.$frontmatter.title),1),n(" for core")]),a("div",i,t(s.$frontmatter.core),1),k])}const m=e(l,[["render",h],["__file","match.html.vue"]]);export{m as default};
