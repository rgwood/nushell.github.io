import{_ as t,p,q as o,Q as a,t as n,v as e,a1 as r}from"./framework-344bb0e4.js";const c={},l={id:"frontmatter-title-for-filters",tabindex:"-1"},u=a("a",{class:"header-anchor",href:"#frontmatter-title-for-filters","aria-hidden":"true"},"#",-1),i={class:"command-title"},d=r(`<h2 id="signature" tabindex="-1"><a class="header-anchor" href="#signature" aria-hidden="true">#</a> Signature</h2><p><code>&gt; par-each (closure) --threads</code></p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h2><ul><li><code>closure</code>: the closure to run</li><li><code>--threads {int}</code>: the number of threads to use</li></ul><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Multiplies each number. Note that the list will become arbitrarily disordered.</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">|</span> par-each <span class="token punctuation">{</span> <span class="token number">2</span> * <span class="token variable">$in</span> <span class="token punctuation">}</span>

</code></pre></div><p>Output can still be sorted afterward</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">[</span>foo bar baz<span class="token punctuation">]</span> <span class="token operator">|</span> par-each <span class="token punctuation">{</span><span class="token operator">|</span>e<span class="token operator">|</span> <span class="token variable">$e</span> + <span class="token string">&#39;!&#39;</span> <span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token function">sort</span>
╭───┬──────╮
│ <span class="token number">0</span> │ bar<span class="token operator">!</span> │
│ <span class="token number">1</span> │ baz<span class="token operator">!</span> │
│ <span class="token number">2</span> │ foo<span class="token operator">!</span> │
╰───┴──────╯

</code></pre></div><p>Enumerate and sort-by can be used to reconstruct the original order</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">..</span><span class="token number">3</span> <span class="token operator">|</span> enumerate <span class="token operator">|</span> par-each <span class="token punctuation">{</span><span class="token operator">|</span>p<span class="token operator">|</span> update item <span class="token punctuation">(</span><span class="token variable">$p</span>.item * <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">|</span> sort-by item <span class="token operator">|</span> get item
╭───┬───╮
│ <span class="token number">0</span> │ <span class="token number">2</span> │
│ <span class="token number">1</span> │ <span class="token number">4</span> │
│ <span class="token number">2</span> │ <span class="token number">6</span> │
╰───┴───╯

</code></pre></div><p>Iterate over each element, producing a list showing indexes of any 2s</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">|</span> enumerate <span class="token operator">|</span> par-each <span class="token punctuation">{</span> <span class="token operator">|</span>e<span class="token operator">|</span> <span class="token keyword">if</span> <span class="token variable">$e</span>.item <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">{</span> $<span class="token string">&quot;found 2 at (<span class="token variable">$e</span>.index)!&quot;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>
╭───┬───────────────╮
│ <span class="token number">0</span> │ found <span class="token number">2</span> at <span class="token number">1</span><span class="token operator">!</span> │
╰───┴───────────────╯

</code></pre></div>`,13);function k(s,h){return p(),o("div",null,[a("h1",l,[u,n(),a("code",null,e(s.$frontmatter.title),1),n(" for filters")]),a("div",i,e(s.$frontmatter.filters),1),d])}const b=t(c,[["render",k],["__file","par-each.html.vue"]]);export{b as default};
