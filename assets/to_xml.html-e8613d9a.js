import{_ as e,p as o,q as p,Q as t,t as n,v as s,a1 as r}from"./framework-344bb0e4.js";const l={},c={id:"frontmatter-title-for-formats",tabindex:"-1"},i=t("a",{class:"header-anchor",href:"#frontmatter-title-for-formats","aria-hidden":"true"},"#",-1),u={class:"command-title"},d=r(`<h2 id="signature" tabindex="-1"><a class="header-anchor" href="#signature" aria-hidden="true">#</a> Signature</h2><p><code>&gt; to xml --pretty</code></p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h2><ul><li><code>--pretty {int}</code>: Formats the XML text with the provided indentation setting</li></ul><h2 id="notes" tabindex="-1"><a class="header-anchor" href="#notes" aria-hidden="true">#</a> Notes</h2><p>Every XML entry is represented via a record with tag, attribute and content fields. To represent different types of entries different values must be written to this fields:</p><ol><li>Tag entry: <code>{tag: &lt;tag name&gt; attrs: {&lt;attr name&gt;: &quot;&lt;string value&gt;&quot; ...} content: [&lt;entries&gt;]}</code></li><li>Comment entry: <code>{tag: &#39;!&#39; attrs: null content: &quot;&lt;comment string&gt;&quot;}</code></li><li>Processing instruction (PI): <code>{tag: &#39;?&lt;pi name&gt;&#39; attrs: null content: &quot;&lt;pi content string&gt;&quot;}</code></li><li>Text: <code>{tag: null attrs: null content: &quot;&lt;text&gt;&quot;}</code>. Or as plain <code>&lt;text&gt;</code> instead of record.</li></ol><p>Additionally any field which is: empty record, empty list or null, can be omitted.</p><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Outputs an XML string representing the contents of this table</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">{</span>tag: note attributes: <span class="token punctuation">{</span><span class="token punctuation">}</span> content <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>tag: remember attributes: <span class="token punctuation">{</span><span class="token punctuation">}</span> content <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>tag: null attrs: null content <span class="token builtin class-name">:</span> Event<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token operator">|</span> to xml
<span class="token operator">&lt;</span>note<span class="token operator">&gt;</span><span class="token operator">&lt;</span>remember<span class="token operator">&gt;</span>Event<span class="token operator">&lt;</span>/remember<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/note<span class="token operator">&gt;</span>
</code></pre></div><p>When formatting xml null and empty record fields can be omitted and strings can be written without a wrapping record</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">{</span>tag: note content <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>tag: remember content <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Event<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token operator">|</span> to xml
<span class="token operator">&lt;</span>note<span class="token operator">&gt;</span><span class="token operator">&lt;</span>remember<span class="token operator">&gt;</span>Event<span class="token operator">&lt;</span>/remember<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/note<span class="token operator">&gt;</span>
</code></pre></div><p>Optionally, formats the text with a custom indentation setting</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">{</span>tag: note content <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>tag: remember content <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Event<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token operator">|</span> to xml <span class="token parameter variable">-p</span> <span class="token number">3</span>
<span class="token operator">&lt;</span>note<span class="token operator">&gt;</span>
   <span class="token operator">&lt;</span>remember<span class="token operator">&gt;</span>Event<span class="token operator">&lt;</span>/remember<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>/note<span class="token operator">&gt;</span>
</code></pre></div>`,15);function m(a,k){return o(),p("div",null,[t("h1",c,[i,n(),t("code",null,s(a.$frontmatter.title),1),n(" for formats")]),t("div",u,s(a.$frontmatter.formats),1),d])}const h=e(l,[["render",m],["__file","to_xml.html.vue"]]);export{h as default};
